// Implementation file for parser generated by fsyacc
module CPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "CPar.fsy"

(*	File MicroC/CPar.fsy 
	Parser specification for micro-C, a small imperative language
	sestoft@itu.dk * 2009-09-29
	No (real) shift/reduce conflicts thanks to Niels Kokholm.
*)

open Absyn

// Vardesc 返回的是一个 元组 (g,s)
// g是类型构造函数，s是变量名

let compose1 f (g, s) = ((fun x -> g(f(x))), s)
let nl = CstI 10

# 22 "CPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | PLUSASSIGN
  | MINUSASSIGN
  | TIMESASSIGN
  | DIVASSIGN
  | MODASSIGN
  | COLON
  | QUESTION
  | BITAND
  | BITOR
  | BITXOR
  | BITLEFT
  | BITRIGHT
  | BITANDASSIGN
  | BITORASSIGN
  | BITXORASSIGN
  | BITLEFTASSIGN
  | BITRIGHTASSIGN
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | SEMI
  | COMMA
  | ASSIGN
  | AMP
  | NOT
  | SEQOR
  | SEQAND
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | PLUSONE
  | MINUSONE
  | CHAR
  | ELSE
  | IF
  | INT
  | FLOAT
  | NULL
  | PRINT
  | PRINTLN
  | RETURN
  | VOID
  | WHILE
  | DO
  | FOR
  | DEFAULT
  | SORT
  | MAX
  | MIN
  | SWAP
  | CSTSTRING of (string)
  | NAME of (string)
  | CSTFLOAT of (float)
  | CSTINT of (int)
  | CSTBOOL of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_PLUSASSIGN
    | TOKEN_MINUSASSIGN
    | TOKEN_TIMESASSIGN
    | TOKEN_DIVASSIGN
    | TOKEN_MODASSIGN
    | TOKEN_COLON
    | TOKEN_QUESTION
    | TOKEN_BITAND
    | TOKEN_BITOR
    | TOKEN_BITXOR
    | TOKEN_BITLEFT
    | TOKEN_BITRIGHT
    | TOKEN_BITANDASSIGN
    | TOKEN_BITORASSIGN
    | TOKEN_BITXORASSIGN
    | TOKEN_BITLEFTASSIGN
    | TOKEN_BITRIGHTASSIGN
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_SEMI
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_AMP
    | TOKEN_NOT
    | TOKEN_SEQOR
    | TOKEN_SEQAND
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_PLUSONE
    | TOKEN_MINUSONE
    | TOKEN_CHAR
    | TOKEN_ELSE
    | TOKEN_IF
    | TOKEN_INT
    | TOKEN_FLOAT
    | TOKEN_NULL
    | TOKEN_PRINT
    | TOKEN_PRINTLN
    | TOKEN_RETURN
    | TOKEN_VOID
    | TOKEN_WHILE
    | TOKEN_DO
    | TOKEN_FOR
    | TOKEN_DEFAULT
    | TOKEN_SORT
    | TOKEN_MAX
    | TOKEN_MIN
    | TOKEN_SWAP
    | TOKEN_CSTSTRING
    | TOKEN_NAME
    | TOKEN_CSTFLOAT
    | TOKEN_CSTINT
    | TOKEN_CSTBOOL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Topdecs
    | NONTERM_Topdec
    | NONTERM_Vardec
    | NONTERM_Vardesc
    | NONTERM_Fundec
    | NONTERM_Paramdecs
    | NONTERM_Paramdecs1
    | NONTERM_Block
    | NONTERM_StmtOrDecSeq
    | NONTERM_Stmt
    | NONTERM_StmtM
    | NONTERM_StmtU
    | NONTERM_Expr
    | NONTERM_ExprNotAccess
    | NONTERM_AtExprNotAccess
    | NONTERM_Access
    | NONTERM_Exprs
    | NONTERM_Exprs1
    | NONTERM_Const
    | NONTERM_ConstF
    | NONTERM_Type

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | PLUSASSIGN  -> 1 
  | MINUSASSIGN  -> 2 
  | TIMESASSIGN  -> 3 
  | DIVASSIGN  -> 4 
  | MODASSIGN  -> 5 
  | COLON  -> 6 
  | QUESTION  -> 7 
  | BITAND  -> 8 
  | BITOR  -> 9 
  | BITXOR  -> 10 
  | BITLEFT  -> 11 
  | BITRIGHT  -> 12 
  | BITANDASSIGN  -> 13 
  | BITORASSIGN  -> 14 
  | BITXORASSIGN  -> 15 
  | BITLEFTASSIGN  -> 16 
  | BITRIGHTASSIGN  -> 17 
  | LPAR  -> 18 
  | RPAR  -> 19 
  | LBRACE  -> 20 
  | RBRACE  -> 21 
  | LBRACK  -> 22 
  | RBRACK  -> 23 
  | SEMI  -> 24 
  | COMMA  -> 25 
  | ASSIGN  -> 26 
  | AMP  -> 27 
  | NOT  -> 28 
  | SEQOR  -> 29 
  | SEQAND  -> 30 
  | EQ  -> 31 
  | NE  -> 32 
  | GT  -> 33 
  | LT  -> 34 
  | GE  -> 35 
  | LE  -> 36 
  | PLUS  -> 37 
  | MINUS  -> 38 
  | TIMES  -> 39 
  | DIV  -> 40 
  | MOD  -> 41 
  | PLUSONE  -> 42 
  | MINUSONE  -> 43 
  | CHAR  -> 44 
  | ELSE  -> 45 
  | IF  -> 46 
  | INT  -> 47 
  | FLOAT  -> 48 
  | NULL  -> 49 
  | PRINT  -> 50 
  | PRINTLN  -> 51 
  | RETURN  -> 52 
  | VOID  -> 53 
  | WHILE  -> 54 
  | DO  -> 55 
  | FOR  -> 56 
  | DEFAULT  -> 57 
  | SORT  -> 58 
  | MAX  -> 59 
  | MIN  -> 60 
  | SWAP  -> 61 
  | CSTSTRING _ -> 62 
  | NAME _ -> 63 
  | CSTFLOAT _ -> 64 
  | CSTINT _ -> 65 
  | CSTBOOL _ -> 66 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_PLUSASSIGN 
  | 2 -> TOKEN_MINUSASSIGN 
  | 3 -> TOKEN_TIMESASSIGN 
  | 4 -> TOKEN_DIVASSIGN 
  | 5 -> TOKEN_MODASSIGN 
  | 6 -> TOKEN_COLON 
  | 7 -> TOKEN_QUESTION 
  | 8 -> TOKEN_BITAND 
  | 9 -> TOKEN_BITOR 
  | 10 -> TOKEN_BITXOR 
  | 11 -> TOKEN_BITLEFT 
  | 12 -> TOKEN_BITRIGHT 
  | 13 -> TOKEN_BITANDASSIGN 
  | 14 -> TOKEN_BITORASSIGN 
  | 15 -> TOKEN_BITXORASSIGN 
  | 16 -> TOKEN_BITLEFTASSIGN 
  | 17 -> TOKEN_BITRIGHTASSIGN 
  | 18 -> TOKEN_LPAR 
  | 19 -> TOKEN_RPAR 
  | 20 -> TOKEN_LBRACE 
  | 21 -> TOKEN_RBRACE 
  | 22 -> TOKEN_LBRACK 
  | 23 -> TOKEN_RBRACK 
  | 24 -> TOKEN_SEMI 
  | 25 -> TOKEN_COMMA 
  | 26 -> TOKEN_ASSIGN 
  | 27 -> TOKEN_AMP 
  | 28 -> TOKEN_NOT 
  | 29 -> TOKEN_SEQOR 
  | 30 -> TOKEN_SEQAND 
  | 31 -> TOKEN_EQ 
  | 32 -> TOKEN_NE 
  | 33 -> TOKEN_GT 
  | 34 -> TOKEN_LT 
  | 35 -> TOKEN_GE 
  | 36 -> TOKEN_LE 
  | 37 -> TOKEN_PLUS 
  | 38 -> TOKEN_MINUS 
  | 39 -> TOKEN_TIMES 
  | 40 -> TOKEN_DIV 
  | 41 -> TOKEN_MOD 
  | 42 -> TOKEN_PLUSONE 
  | 43 -> TOKEN_MINUSONE 
  | 44 -> TOKEN_CHAR 
  | 45 -> TOKEN_ELSE 
  | 46 -> TOKEN_IF 
  | 47 -> TOKEN_INT 
  | 48 -> TOKEN_FLOAT 
  | 49 -> TOKEN_NULL 
  | 50 -> TOKEN_PRINT 
  | 51 -> TOKEN_PRINTLN 
  | 52 -> TOKEN_RETURN 
  | 53 -> TOKEN_VOID 
  | 54 -> TOKEN_WHILE 
  | 55 -> TOKEN_DO 
  | 56 -> TOKEN_FOR 
  | 57 -> TOKEN_DEFAULT 
  | 58 -> TOKEN_SORT 
  | 59 -> TOKEN_MAX 
  | 60 -> TOKEN_MIN 
  | 61 -> TOKEN_SWAP 
  | 62 -> TOKEN_CSTSTRING 
  | 63 -> TOKEN_NAME 
  | 64 -> TOKEN_CSTFLOAT 
  | 65 -> TOKEN_CSTINT 
  | 66 -> TOKEN_CSTBOOL 
  | 69 -> TOKEN_end_of_input
  | 67 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Topdecs 
    | 3 -> NONTERM_Topdecs 
    | 4 -> NONTERM_Topdec 
    | 5 -> NONTERM_Topdec 
    | 6 -> NONTERM_Vardec 
    | 7 -> NONTERM_Vardesc 
    | 8 -> NONTERM_Vardesc 
    | 9 -> NONTERM_Vardesc 
    | 10 -> NONTERM_Vardesc 
    | 11 -> NONTERM_Vardesc 
    | 12 -> NONTERM_Fundec 
    | 13 -> NONTERM_Fundec 
    | 14 -> NONTERM_Paramdecs 
    | 15 -> NONTERM_Paramdecs 
    | 16 -> NONTERM_Paramdecs1 
    | 17 -> NONTERM_Paramdecs1 
    | 18 -> NONTERM_Block 
    | 19 -> NONTERM_StmtOrDecSeq 
    | 20 -> NONTERM_StmtOrDecSeq 
    | 21 -> NONTERM_StmtOrDecSeq 
    | 22 -> NONTERM_Stmt 
    | 23 -> NONTERM_Stmt 
    | 24 -> NONTERM_StmtM 
    | 25 -> NONTERM_StmtM 
    | 26 -> NONTERM_StmtM 
    | 27 -> NONTERM_StmtM 
    | 28 -> NONTERM_StmtM 
    | 29 -> NONTERM_StmtM 
    | 30 -> NONTERM_StmtM 
    | 31 -> NONTERM_StmtM 
    | 32 -> NONTERM_StmtU 
    | 33 -> NONTERM_StmtU 
    | 34 -> NONTERM_StmtU 
    | 35 -> NONTERM_StmtU 
    | 36 -> NONTERM_StmtU 
    | 37 -> NONTERM_Expr 
    | 38 -> NONTERM_Expr 
    | 39 -> NONTERM_ExprNotAccess 
    | 40 -> NONTERM_ExprNotAccess 
    | 41 -> NONTERM_ExprNotAccess 
    | 42 -> NONTERM_ExprNotAccess 
    | 43 -> NONTERM_ExprNotAccess 
    | 44 -> NONTERM_ExprNotAccess 
    | 45 -> NONTERM_ExprNotAccess 
    | 46 -> NONTERM_ExprNotAccess 
    | 47 -> NONTERM_ExprNotAccess 
    | 48 -> NONTERM_ExprNotAccess 
    | 49 -> NONTERM_ExprNotAccess 
    | 50 -> NONTERM_ExprNotAccess 
    | 51 -> NONTERM_ExprNotAccess 
    | 52 -> NONTERM_ExprNotAccess 
    | 53 -> NONTERM_ExprNotAccess 
    | 54 -> NONTERM_ExprNotAccess 
    | 55 -> NONTERM_ExprNotAccess 
    | 56 -> NONTERM_ExprNotAccess 
    | 57 -> NONTERM_ExprNotAccess 
    | 58 -> NONTERM_ExprNotAccess 
    | 59 -> NONTERM_ExprNotAccess 
    | 60 -> NONTERM_ExprNotAccess 
    | 61 -> NONTERM_ExprNotAccess 
    | 62 -> NONTERM_ExprNotAccess 
    | 63 -> NONTERM_ExprNotAccess 
    | 64 -> NONTERM_ExprNotAccess 
    | 65 -> NONTERM_ExprNotAccess 
    | 66 -> NONTERM_ExprNotAccess 
    | 67 -> NONTERM_ExprNotAccess 
    | 68 -> NONTERM_ExprNotAccess 
    | 69 -> NONTERM_ExprNotAccess 
    | 70 -> NONTERM_ExprNotAccess 
    | 71 -> NONTERM_ExprNotAccess 
    | 72 -> NONTERM_ExprNotAccess 
    | 73 -> NONTERM_ExprNotAccess 
    | 74 -> NONTERM_ExprNotAccess 
    | 75 -> NONTERM_ExprNotAccess 
    | 76 -> NONTERM_ExprNotAccess 
    | 77 -> NONTERM_ExprNotAccess 
    | 78 -> NONTERM_AtExprNotAccess 
    | 79 -> NONTERM_AtExprNotAccess 
    | 80 -> NONTERM_AtExprNotAccess 
    | 81 -> NONTERM_AtExprNotAccess 
    | 82 -> NONTERM_Access 
    | 83 -> NONTERM_Access 
    | 84 -> NONTERM_Access 
    | 85 -> NONTERM_Access 
    | 86 -> NONTERM_Access 
    | 87 -> NONTERM_Exprs 
    | 88 -> NONTERM_Exprs 
    | 89 -> NONTERM_Exprs1 
    | 90 -> NONTERM_Exprs1 
    | 91 -> NONTERM_Const 
    | 92 -> NONTERM_Const 
    | 93 -> NONTERM_Const 
    | 94 -> NONTERM_Const 
    | 95 -> NONTERM_ConstF 
    | 96 -> NONTERM_ConstF 
    | 97 -> NONTERM_Type 
    | 98 -> NONTERM_Type 
    | 99 -> NONTERM_Type 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 69 
let _fsyacc_tagOfErrorTerminal = 67

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | PLUSASSIGN  -> "PLUSASSIGN" 
  | MINUSASSIGN  -> "MINUSASSIGN" 
  | TIMESASSIGN  -> "TIMESASSIGN" 
  | DIVASSIGN  -> "DIVASSIGN" 
  | MODASSIGN  -> "MODASSIGN" 
  | COLON  -> "COLON" 
  | QUESTION  -> "QUESTION" 
  | BITAND  -> "BITAND" 
  | BITOR  -> "BITOR" 
  | BITXOR  -> "BITXOR" 
  | BITLEFT  -> "BITLEFT" 
  | BITRIGHT  -> "BITRIGHT" 
  | BITANDASSIGN  -> "BITANDASSIGN" 
  | BITORASSIGN  -> "BITORASSIGN" 
  | BITXORASSIGN  -> "BITXORASSIGN" 
  | BITLEFTASSIGN  -> "BITLEFTASSIGN" 
  | BITRIGHTASSIGN  -> "BITRIGHTASSIGN" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | SEMI  -> "SEMI" 
  | COMMA  -> "COMMA" 
  | ASSIGN  -> "ASSIGN" 
  | AMP  -> "AMP" 
  | NOT  -> "NOT" 
  | SEQOR  -> "SEQOR" 
  | SEQAND  -> "SEQAND" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | PLUSONE  -> "PLUSONE" 
  | MINUSONE  -> "MINUSONE" 
  | CHAR  -> "CHAR" 
  | ELSE  -> "ELSE" 
  | IF  -> "IF" 
  | INT  -> "INT" 
  | FLOAT  -> "FLOAT" 
  | NULL  -> "NULL" 
  | PRINT  -> "PRINT" 
  | PRINTLN  -> "PRINTLN" 
  | RETURN  -> "RETURN" 
  | VOID  -> "VOID" 
  | WHILE  -> "WHILE" 
  | DO  -> "DO" 
  | FOR  -> "FOR" 
  | DEFAULT  -> "DEFAULT" 
  | SORT  -> "SORT" 
  | MAX  -> "MAX" 
  | MIN  -> "MIN" 
  | SWAP  -> "SWAP" 
  | CSTSTRING _ -> "CSTSTRING" 
  | NAME _ -> "NAME" 
  | CSTFLOAT _ -> "CSTFLOAT" 
  | CSTINT _ -> "CSTINT" 
  | CSTBOOL _ -> "CSTBOOL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | PLUSASSIGN  -> (null : System.Object) 
  | MINUSASSIGN  -> (null : System.Object) 
  | TIMESASSIGN  -> (null : System.Object) 
  | DIVASSIGN  -> (null : System.Object) 
  | MODASSIGN  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | QUESTION  -> (null : System.Object) 
  | BITAND  -> (null : System.Object) 
  | BITOR  -> (null : System.Object) 
  | BITXOR  -> (null : System.Object) 
  | BITLEFT  -> (null : System.Object) 
  | BITRIGHT  -> (null : System.Object) 
  | BITANDASSIGN  -> (null : System.Object) 
  | BITORASSIGN  -> (null : System.Object) 
  | BITXORASSIGN  -> (null : System.Object) 
  | BITLEFTASSIGN  -> (null : System.Object) 
  | BITRIGHTASSIGN  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | SEQOR  -> (null : System.Object) 
  | SEQAND  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | PLUSONE  -> (null : System.Object) 
  | MINUSONE  -> (null : System.Object) 
  | CHAR  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | FLOAT  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | PRINTLN  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | VOID  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | DEFAULT  -> (null : System.Object) 
  | SORT  -> (null : System.Object) 
  | MAX  -> (null : System.Object) 
  | MIN  -> (null : System.Object) 
  | SWAP  -> (null : System.Object) 
  | CSTSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTFLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 4us; 5us; 2us; 65535us; 0us; 4us; 4us; 4us; 8us; 65535us; 0us; 6us; 4us; 6us; 25us; 34us; 29us; 34us; 35us; 34us; 37us; 42us; 40us; 42us; 43us; 42us; 4us; 65535us; 9us; 11us; 10us; 11us; 14us; 15us; 16us; 17us; 2us; 65535us; 0us; 8us; 4us; 8us; 2us; 65535us; 25us; 26us; 29us; 30us; 3us; 65535us; 25us; 33us; 29us; 33us; 35us; 36us; 10us; 65535us; 27us; 28us; 31us; 32us; 37us; 54us; 40us; 54us; 43us; 54us; 58us; 54us; 59us; 54us; 64us; 54us; 66us; 54us; 79us; 54us; 3us; 65535us; 37us; 38us; 40us; 41us; 43us; 44us; 4us; 65535us; 37us; 40us; 40us; 40us; 43us; 40us; 58us; 82us; 8us; 65535us; 37us; 45us; 40us; 45us; 43us; 45us; 58us; 46us; 59us; 60us; 64us; 65us; 66us; 67us; 79us; 80us; 8us; 65535us; 37us; 47us; 40us; 47us; 43us; 47us; 58us; 47us; 59us; 81us; 64us; 83us; 66us; 84us; 79us; 89us; 53us; 65535us; 37us; 48us; 40us; 48us; 43us; 48us; 50us; 52us; 56us; 57us; 58us; 48us; 59us; 48us; 62us; 63us; 64us; 48us; 66us; 48us; 69us; 70us; 73us; 74us; 75us; 76us; 77us; 78us; 79us; 48us; 86us; 87us; 95us; 96us; 98us; 138us; 101us; 102us; 103us; 104us; 139us; 106us; 146us; 107us; 147us; 108us; 148us; 109us; 149us; 110us; 150us; 111us; 151us; 112us; 152us; 113us; 153us; 114us; 154us; 115us; 155us; 116us; 156us; 117us; 157us; 118us; 158us; 119us; 159us; 120us; 160us; 121us; 161us; 122us; 162us; 123us; 163us; 124us; 164us; 125us; 165us; 126us; 166us; 127us; 167us; 128us; 168us; 129us; 169us; 130us; 170us; 131us; 171us; 132us; 172us; 133us; 173us; 135us; 174us; 136us; 177us; 134us; 188us; 137us; 191us; 138us; 53us; 65535us; 37us; 92us; 40us; 92us; 43us; 92us; 50us; 92us; 56us; 92us; 58us; 92us; 59us; 92us; 62us; 92us; 64us; 92us; 66us; 92us; 69us; 92us; 73us; 92us; 75us; 92us; 77us; 92us; 79us; 92us; 86us; 92us; 95us; 92us; 98us; 92us; 101us; 92us; 103us; 92us; 139us; 92us; 146us; 92us; 147us; 92us; 148us; 92us; 149us; 92us; 150us; 92us; 151us; 92us; 152us; 92us; 153us; 92us; 154us; 92us; 155us; 92us; 156us; 92us; 157us; 92us; 158us; 92us; 159us; 92us; 160us; 92us; 161us; 92us; 162us; 92us; 163us; 92us; 164us; 92us; 165us; 92us; 166us; 92us; 167us; 92us; 168us; 92us; 169us; 92us; 170us; 92us; 171us; 92us; 172us; 92us; 173us; 92us; 174us; 92us; 177us; 93us; 188us; 92us; 191us; 92us; 54us; 65535us; 37us; 94us; 40us; 94us; 43us; 94us; 50us; 94us; 56us; 94us; 58us; 94us; 59us; 94us; 62us; 94us; 64us; 94us; 66us; 94us; 69us; 94us; 73us; 94us; 75us; 94us; 77us; 94us; 79us; 94us; 86us; 94us; 95us; 94us; 98us; 94us; 101us; 94us; 103us; 94us; 139us; 94us; 146us; 94us; 147us; 94us; 148us; 94us; 149us; 94us; 150us; 94us; 151us; 94us; 152us; 94us; 153us; 94us; 154us; 94us; 155us; 94us; 156us; 94us; 157us; 94us; 158us; 94us; 159us; 94us; 160us; 94us; 161us; 94us; 162us; 94us; 163us; 94us; 164us; 94us; 165us; 94us; 166us; 94us; 167us; 94us; 168us; 94us; 169us; 94us; 170us; 94us; 171us; 94us; 172us; 94us; 173us; 94us; 174us; 94us; 177us; 94us; 185us; 187us; 188us; 94us; 191us; 94us; 58us; 65535us; 37us; 91us; 40us; 91us; 43us; 91us; 50us; 91us; 56us; 91us; 58us; 91us; 59us; 91us; 62us; 91us; 64us; 91us; 66us; 91us; 69us; 91us; 73us; 91us; 75us; 91us; 77us; 91us; 79us; 91us; 86us; 91us; 95us; 91us; 98us; 91us; 101us; 91us; 103us; 91us; 139us; 91us; 142us; 143us; 144us; 145us; 146us; 91us; 147us; 91us; 148us; 91us; 149us; 91us; 150us; 91us; 151us; 91us; 152us; 91us; 153us; 91us; 154us; 91us; 155us; 91us; 156us; 91us; 157us; 91us; 158us; 91us; 159us; 91us; 160us; 91us; 161us; 91us; 162us; 91us; 163us; 91us; 164us; 91us; 165us; 91us; 166us; 91us; 167us; 91us; 168us; 91us; 169us; 91us; 170us; 91us; 171us; 91us; 172us; 91us; 173us; 91us; 174us; 91us; 177us; 90us; 179us; 180us; 182us; 183us; 185us; 186us; 188us; 91us; 191us; 91us; 1us; 65535us; 98us; 99us; 2us; 65535us; 98us; 190us; 191us; 192us; 54us; 65535us; 37us; 175us; 40us; 175us; 43us; 175us; 50us; 175us; 56us; 175us; 58us; 175us; 59us; 175us; 62us; 175us; 64us; 175us; 66us; 175us; 69us; 175us; 73us; 175us; 75us; 175us; 77us; 175us; 79us; 175us; 86us; 175us; 95us; 175us; 98us; 175us; 101us; 175us; 103us; 175us; 139us; 175us; 146us; 175us; 147us; 175us; 148us; 175us; 149us; 175us; 150us; 175us; 151us; 175us; 152us; 175us; 153us; 175us; 154us; 175us; 155us; 175us; 156us; 175us; 157us; 175us; 158us; 175us; 159us; 175us; 160us; 175us; 161us; 175us; 162us; 175us; 163us; 175us; 164us; 175us; 165us; 175us; 166us; 175us; 167us; 175us; 168us; 175us; 169us; 175us; 170us; 175us; 171us; 175us; 172us; 175us; 173us; 175us; 174us; 175us; 177us; 175us; 185us; 175us; 188us; 175us; 191us; 175us; 54us; 65535us; 37us; 176us; 40us; 176us; 43us; 176us; 50us; 176us; 56us; 176us; 58us; 176us; 59us; 176us; 62us; 176us; 64us; 176us; 66us; 176us; 69us; 176us; 73us; 176us; 75us; 176us; 77us; 176us; 79us; 176us; 86us; 176us; 95us; 176us; 98us; 176us; 101us; 176us; 103us; 176us; 139us; 176us; 146us; 176us; 147us; 176us; 148us; 176us; 149us; 176us; 150us; 176us; 151us; 176us; 152us; 176us; 153us; 176us; 154us; 176us; 155us; 176us; 156us; 176us; 157us; 176us; 158us; 176us; 159us; 176us; 160us; 176us; 161us; 176us; 162us; 176us; 163us; 176us; 164us; 176us; 165us; 176us; 166us; 176us; 167us; 176us; 168us; 176us; 169us; 176us; 170us; 176us; 171us; 176us; 172us; 176us; 173us; 176us; 174us; 176us; 177us; 176us; 185us; 176us; 188us; 176us; 191us; 176us; 8us; 65535us; 0us; 10us; 4us; 10us; 25us; 9us; 29us; 9us; 35us; 9us; 37us; 9us; 40us; 9us; 43us; 9us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; 18us; 23us; 26us; 29us; 33us; 44us; 48us; 53us; 62us; 71us; 125us; 179us; 234us; 293us; 295us; 298us; 353us; 408us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 2us; 6us; 13us; 3us; 6us; 10us; 11us; 1us; 7us; 2us; 7us; 13us; 1us; 8us; 3us; 8us; 10us; 11us; 1us; 9us; 3us; 9us; 10us; 11us; 1us; 9us; 2us; 10us; 11us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 15us; 2us; 16us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 22us; 3us; 22us; 28us; 32us; 1us; 23us; 20us; 24us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 1us; 24us; 2us; 25us; 26us; 1us; 25us; 20us; 26us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 1us; 26us; 1us; 27us; 3us; 28us; 32us; 33us; 3us; 28us; 32us; 33us; 22us; 28us; 32us; 33us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 3us; 28us; 32us; 33us; 2us; 28us; 32us; 1us; 28us; 2us; 29us; 34us; 2us; 29us; 34us; 21us; 29us; 34us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 2us; 29us; 34us; 1us; 29us; 2us; 30us; 35us; 1us; 30us; 1us; 30us; 1us; 30us; 20us; 30us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 1us; 30us; 2us; 31us; 36us; 2us; 31us; 36us; 21us; 31us; 36us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 2us; 31us; 36us; 21us; 31us; 36us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 2us; 31us; 36us; 21us; 31us; 36us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 2us; 31us; 36us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 35us; 1us; 35us; 20us; 35us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 1us; 35us; 1us; 36us; 16us; 37us; 40us; 46us; 47us; 50us; 51us; 52us; 53us; 54us; 72us; 73us; 74us; 75us; 76us; 83us; 86us; 15us; 37us; 40us; 46us; 47us; 50us; 51us; 52us; 53us; 54us; 72us; 73us; 74us; 75us; 76us; 86us; 1us; 38us; 2us; 38us; 80us; 1us; 39us; 1us; 40us; 20us; 40us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 2us; 41us; 82us; 1us; 41us; 1us; 41us; 1us; 41us; 1us; 42us; 20us; 42us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 1us; 43us; 20us; 43us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 1us; 44us; 20us; 45us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 20us; 45us; 50us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 20us; 45us; 51us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 20us; 45us; 52us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 20us; 45us; 53us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 20us; 45us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 20us; 45us; 55us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 20us; 45us; 55us; 56us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 20us; 45us; 55us; 56us; 57us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 20us; 45us; 55us; 56us; 57us; 58us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 20us; 45us; 55us; 56us; 57us; 58us; 59us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 20us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 20us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 20us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 20us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 20us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 20us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 20us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 20us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 67us; 68us; 69us; 70us; 71us; 77us; 20us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 68us; 69us; 70us; 71us; 77us; 20us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 69us; 70us; 71us; 77us; 20us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 70us; 71us; 77us; 20us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 71us; 77us; 20us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 77us; 20us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 73us; 77us; 20us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 74us; 77us; 20us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 75us; 77us; 20us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 76us; 77us; 19us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 20us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 77us; 20us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 77us; 20us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 86us; 21us; 45us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 77us; 89us; 90us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 2us; 48us; 86us; 1us; 49us; 2us; 49us; 86us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 64us; 1us; 65us; 1us; 66us; 1us; 67us; 1us; 68us; 1us; 69us; 1us; 70us; 1us; 71us; 1us; 72us; 1us; 73us; 1us; 74us; 1us; 75us; 1us; 76us; 1us; 77us; 1us; 77us; 1us; 78us; 1us; 79us; 2us; 80us; 83us; 1us; 80us; 1us; 81us; 2us; 81us; 86us; 1us; 82us; 1us; 83us; 2us; 83us; 86us; 1us; 83us; 2us; 84us; 85us; 2us; 84us; 86us; 1us; 85us; 1us; 86us; 1us; 86us; 1us; 88us; 1us; 90us; 1us; 90us; 1us; 91us; 1us; 92us; 2us; 93us; 96us; 1us; 93us; 1us; 94us; 1us; 95us; 1us; 96us; 1us; 97us; 1us; 98us; 1us; 99us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 23us; 27us; 29us; 32us; 34us; 38us; 40us; 44us; 46us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 80us; 82us; 84us; 86us; 88us; 90us; 92us; 94us; 96us; 98us; 100us; 102us; 106us; 108us; 129us; 131us; 134us; 136us; 157us; 159us; 161us; 165us; 169us; 192us; 196us; 199us; 201us; 204us; 207us; 229us; 232us; 234us; 237us; 239us; 241us; 243us; 264us; 266us; 269us; 272us; 294us; 297us; 319us; 322us; 344us; 347us; 349us; 351us; 353us; 355us; 357us; 359us; 361us; 382us; 384us; 386us; 403us; 419us; 421us; 424us; 426us; 428us; 449us; 452us; 454us; 456us; 458us; 460us; 481us; 483us; 504us; 506us; 527us; 548us; 569us; 590us; 611us; 632us; 653us; 674us; 695us; 716us; 737us; 758us; 779us; 800us; 821us; 842us; 863us; 884us; 905us; 926us; 947us; 968us; 989us; 1010us; 1031us; 1052us; 1073us; 1094us; 1114us; 1135us; 1156us; 1177us; 1199us; 1201us; 1203us; 1205us; 1207us; 1210us; 1212us; 1215us; 1217us; 1219us; 1221us; 1223us; 1225us; 1227us; 1229us; 1231us; 1233us; 1235us; 1237us; 1239us; 1241us; 1243us; 1245us; 1247us; 1249us; 1251us; 1253us; 1255us; 1257us; 1259us; 1261us; 1263us; 1265us; 1267us; 1269us; 1271us; 1273us; 1275us; 1277us; 1280us; 1282us; 1284us; 1287us; 1289us; 1291us; 1294us; 1296us; 1299us; 1302us; 1304us; 1306us; 1308us; 1310us; 1312us; 1314us; 1316us; 1318us; 1321us; 1323us; 1325us; 1327us; 1329us; 1331us; 1333us; |]
let _fsyacc_action_rows = 203
let _fsyacc_actionTableElements = [|4us; 16386us; 44us; 201us; 47us; 200us; 48us; 202us; 53us; 23us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 4us; 16386us; 44us; 201us; 47us; 200us; 48us; 202us; 53us; 23us; 0us; 16387us; 1us; 32768us; 24us; 7us; 0us; 16388us; 0us; 16389us; 3us; 32768us; 18us; 16us; 39us; 14us; 63us; 12us; 3us; 32768us; 18us; 16us; 39us; 14us; 63us; 13us; 1us; 16390us; 22us; 19us; 0us; 16391us; 1us; 16391us; 18us; 29us; 3us; 32768us; 18us; 16us; 39us; 14us; 63us; 12us; 1us; 16392us; 22us; 19us; 3us; 32768us; 18us; 16us; 39us; 14us; 63us; 12us; 2us; 32768us; 19us; 18us; 22us; 19us; 0us; 16393us; 2us; 32768us; 23us; 20us; 65us; 21us; 0us; 16394us; 1us; 32768us; 23us; 22us; 0us; 16395us; 1us; 32768us; 63us; 24us; 1us; 32768us; 18us; 25us; 3us; 16398us; 44us; 201us; 47us; 200us; 48us; 202us; 1us; 32768us; 19us; 27us; 1us; 32768us; 20us; 37us; 0us; 16396us; 3us; 16398us; 44us; 201us; 47us; 200us; 48us; 202us; 1us; 32768us; 19us; 31us; 1us; 32768us; 20us; 37us; 0us; 16397us; 0us; 16399us; 1us; 16400us; 25us; 35us; 3us; 32768us; 44us; 201us; 47us; 200us; 48us; 202us; 0us; 16401us; 23us; 16403us; 18us; 177us; 20us; 37us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 44us; 201us; 46us; 55us; 47us; 200us; 48us; 202us; 49us; 197us; 50us; 103us; 51us; 105us; 52us; 50us; 54us; 61us; 55us; 66us; 56us; 72us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 1us; 32768us; 21us; 39us; 0us; 16402us; 23us; 16403us; 18us; 177us; 20us; 37us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 44us; 201us; 46us; 55us; 47us; 200us; 48us; 202us; 49us; 197us; 50us; 103us; 51us; 105us; 52us; 50us; 54us; 61us; 55us; 66us; 56us; 72us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 0us; 16404us; 1us; 32768us; 24us; 43us; 23us; 16403us; 18us; 177us; 20us; 37us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 44us; 201us; 46us; 55us; 47us; 200us; 48us; 202us; 49us; 197us; 50us; 103us; 51us; 105us; 52us; 50us; 54us; 61us; 55us; 66us; 56us; 72us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 0us; 16405us; 0us; 16406us; 1us; 16406us; 45us; 59us; 0us; 16407us; 20us; 32768us; 7us; 173us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 24us; 49us; 29us; 162us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 0us; 16408us; 15us; 32768us; 18us; 177us; 24us; 51us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 0us; 16409us; 20us; 32768us; 7us; 173us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 24us; 53us; 29us; 162us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 0us; 16410us; 0us; 16411us; 1us; 32768us; 18us; 56us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 20us; 32768us; 7us; 173us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 19us; 58us; 29us; 162us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 20us; 32768us; 18us; 177us; 20us; 37us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 46us; 55us; 49us; 197us; 50us; 103us; 51us; 105us; 52us; 50us; 54us; 61us; 55us; 66us; 56us; 72us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 20us; 32768us; 18us; 177us; 20us; 37us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 46us; 55us; 49us; 197us; 50us; 103us; 51us; 105us; 52us; 50us; 54us; 61us; 55us; 66us; 56us; 72us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 0us; 16412us; 1us; 32768us; 18us; 62us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 20us; 32768us; 7us; 173us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 19us; 64us; 29us; 162us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 20us; 32768us; 18us; 177us; 20us; 37us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 46us; 55us; 49us; 197us; 50us; 103us; 51us; 105us; 52us; 50us; 54us; 61us; 55us; 66us; 56us; 72us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 0us; 16413us; 20us; 32768us; 18us; 177us; 20us; 37us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 46us; 55us; 49us; 197us; 50us; 103us; 51us; 105us; 52us; 50us; 54us; 61us; 55us; 66us; 56us; 72us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 1us; 32768us; 54us; 68us; 1us; 32768us; 18us; 69us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 20us; 32768us; 7us; 173us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 19us; 71us; 29us; 162us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 0us; 16414us; 1us; 32768us; 18us; 73us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 20us; 32768us; 7us; 173us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 24us; 75us; 29us; 162us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 20us; 32768us; 7us; 173us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 24us; 77us; 29us; 162us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 20us; 32768us; 7us; 173us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 19us; 79us; 29us; 162us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 20us; 32768us; 18us; 177us; 20us; 37us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 46us; 55us; 49us; 197us; 50us; 103us; 51us; 105us; 52us; 50us; 54us; 61us; 55us; 66us; 56us; 72us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 0us; 16415us; 0us; 16416us; 0us; 16417us; 0us; 16418us; 1us; 32768us; 54us; 85us; 1us; 32768us; 18us; 86us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 20us; 32768us; 7us; 173us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 19us; 88us; 29us; 162us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 0us; 16419us; 0us; 16420us; 15us; 16421us; 1us; 146us; 2us; 147us; 3us; 148us; 4us; 149us; 5us; 150us; 13us; 168us; 14us; 169us; 15us; 170us; 16us; 171us; 17us; 172us; 19us; 184us; 22us; 188us; 26us; 95us; 42us; 140us; 43us; 141us; 14us; 16421us; 1us; 146us; 2us; 147us; 3us; 148us; 4us; 149us; 5us; 150us; 13us; 168us; 14us; 169us; 15us; 170us; 16us; 171us; 17us; 172us; 22us; 188us; 26us; 95us; 42us; 140us; 43us; 141us; 0us; 16422us; 1us; 16422us; 19us; 178us; 0us; 16423us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 19us; 16424us; 7us; 173us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 29us; 162us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 1us; 16466us; 18us; 98us; 14us; 16471us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 1us; 32768us; 19us; 100us; 0us; 16425us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 0us; 16426us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 19us; 16427us; 7us; 173us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 29us; 162us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 0us; 16428us; 3us; 16429us; 39us; 152us; 40us; 153us; 41us; 154us; 19us; 16434us; 7us; 173us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 29us; 162us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 19us; 16435us; 7us; 173us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 29us; 162us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 19us; 16436us; 7us; 173us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 29us; 162us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 19us; 16437us; 7us; 173us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 29us; 162us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 19us; 16438us; 7us; 173us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 29us; 162us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 3us; 16439us; 39us; 152us; 40us; 153us; 41us; 154us; 0us; 16440us; 0us; 16441us; 0us; 16442us; 11us; 16443us; 11us; 166us; 12us; 167us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 11us; 16444us; 11us; 166us; 12us; 167us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 11us; 16445us; 11us; 166us; 12us; 167us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 11us; 16446us; 11us; 166us; 12us; 167us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 11us; 16447us; 11us; 166us; 12us; 167us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 11us; 16448us; 11us; 166us; 12us; 167us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 16us; 16449us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 17us; 16450us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 13us; 16451us; 11us; 166us; 12us; 167us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 13us; 16452us; 11us; 166us; 12us; 167us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 13us; 16453us; 11us; 166us; 12us; 167us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 5us; 16454us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 5us; 16455us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 19us; 16456us; 7us; 173us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 29us; 162us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 19us; 16457us; 7us; 173us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 29us; 162us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 19us; 16458us; 7us; 173us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 29us; 162us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 19us; 16459us; 7us; 173us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 29us; 162us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 19us; 16460us; 7us; 173us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 29us; 162us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 19us; 32768us; 7us; 173us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 29us; 162us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 20us; 32768us; 6us; 174us; 7us; 173us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 29us; 162us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 19us; 16461us; 7us; 173us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 29us; 162us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 20us; 32768us; 7us; 173us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 23us; 189us; 29us; 162us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 20us; 16473us; 7us; 173us; 8us; 163us; 9us; 164us; 10us; 165us; 11us; 166us; 12us; 167us; 25us; 191us; 29us; 162us; 30us; 161us; 31us; 155us; 32us; 156us; 33us; 157us; 34us; 158us; 35us; 159us; 36us; 160us; 37us; 139us; 38us; 151us; 39us; 152us; 40us; 153us; 41us; 154us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 0us; 16430us; 0us; 16431us; 3us; 32768us; 18us; 182us; 39us; 185us; 63us; 181us; 1us; 16432us; 22us; 188us; 3us; 32768us; 18us; 182us; 39us; 185us; 63us; 181us; 1us; 16433us; 22us; 188us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 0us; 16462us; 0us; 16463us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 0us; 16464us; 3us; 32768us; 18us; 182us; 39us; 185us; 63us; 181us; 1us; 16465us; 22us; 188us; 0us; 16466us; 3us; 32768us; 18us; 182us; 39us; 185us; 63us; 181us; 2us; 32768us; 19us; 184us; 22us; 188us; 0us; 16467us; 9us; 32768us; 18us; 177us; 27us; 179us; 38us; 195us; 39us; 185us; 49us; 197us; 63us; 181us; 64us; 198us; 65us; 193us; 66us; 194us; 1us; 16468us; 22us; 188us; 0us; 16469us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 0us; 16470us; 0us; 16472us; 14us; 32768us; 18us; 177us; 27us; 179us; 28us; 101us; 38us; 195us; 39us; 185us; 42us; 142us; 43us; 144us; 49us; 197us; 50us; 103us; 51us; 105us; 63us; 97us; 64us; 198us; 65us; 193us; 66us; 194us; 0us; 16474us; 0us; 16475us; 0us; 16476us; 2us; 32768us; 64us; 199us; 65us; 196us; 0us; 16477us; 0us; 16478us; 0us; 16479us; 0us; 16480us; 0us; 16481us; 0us; 16482us; 0us; 16483us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 8us; 9us; 14us; 15us; 17us; 18us; 19us; 23us; 27us; 29us; 30us; 32us; 36us; 38us; 42us; 45us; 46us; 49us; 50us; 52us; 53us; 55us; 57us; 61us; 63us; 65us; 66us; 70us; 72us; 74us; 75us; 76us; 78us; 82us; 83us; 107us; 109us; 110us; 134us; 135us; 137us; 161us; 162us; 163us; 165us; 166us; 187us; 188us; 204us; 205us; 226us; 227us; 228us; 230us; 245us; 266us; 287us; 308us; 309us; 311us; 326us; 347us; 368us; 369us; 390us; 392us; 394us; 409us; 430us; 431us; 433us; 448us; 469us; 484us; 505us; 520us; 541us; 562us; 563us; 564us; 565us; 566us; 568us; 570us; 585us; 606us; 607us; 608us; 624us; 639us; 640us; 642us; 643us; 658us; 678us; 680us; 695us; 697us; 698us; 713us; 714us; 729us; 749us; 750us; 754us; 774us; 794us; 814us; 834us; 854us; 858us; 859us; 860us; 861us; 873us; 885us; 897us; 909us; 921us; 933us; 950us; 968us; 982us; 996us; 1010us; 1016us; 1022us; 1042us; 1062us; 1082us; 1102us; 1122us; 1142us; 1163us; 1183us; 1204us; 1225us; 1240us; 1241us; 1242us; 1246us; 1248us; 1252us; 1254us; 1269us; 1284us; 1299us; 1314us; 1329us; 1344us; 1359us; 1374us; 1389us; 1404us; 1419us; 1434us; 1449us; 1464us; 1479us; 1494us; 1509us; 1524us; 1539us; 1554us; 1569us; 1584us; 1599us; 1614us; 1629us; 1644us; 1659us; 1674us; 1689us; 1690us; 1691us; 1706us; 1707us; 1711us; 1713us; 1714us; 1718us; 1721us; 1722us; 1732us; 1734us; 1735us; 1750us; 1751us; 1752us; 1767us; 1768us; 1769us; 1770us; 1773us; 1774us; 1775us; 1776us; 1777us; 1778us; 1779us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 0us; 2us; 2us; 1us; 2us; 1us; 2us; 3us; 3us; 4us; 6us; 6us; 0us; 1us; 1us; 3us; 3us; 0us; 2us; 3us; 1us; 1us; 2us; 2us; 3us; 1us; 7us; 5us; 6us; 9us; 7us; 5us; 5us; 6us; 9us; 1us; 1us; 1us; 3us; 4us; 2us; 2us; 1us; 3us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 5us; 1us; 1us; 3us; 2us; 1us; 3us; 2us; 2us; 4us; 0us; 1us; 1us; 3us; 1us; 1us; 2us; 1us; 1us; 2us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 10us; 10us; 10us; 11us; 11us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 13us; 13us; 13us; 13us; 13us; 14us; 14us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 16us; 16us; 16us; 16us; 17us; 17us; 17us; 17us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 20us; 20us; 21us; 21us; 22us; 22us; 22us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 65535us; 16388us; 16389us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 16394us; 65535us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 16397us; 16399us; 65535us; 65535us; 16401us; 65535us; 65535us; 16402us; 65535us; 16404us; 65535us; 65535us; 16405us; 16406us; 65535us; 16407us; 65535us; 16408us; 65535us; 16409us; 65535us; 16410us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 65535us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16415us; 16416us; 16417us; 16418us; 65535us; 65535us; 65535us; 65535us; 16419us; 16420us; 65535us; 65535us; 16422us; 65535us; 16423us; 65535us; 65535us; 65535us; 65535us; 65535us; 16425us; 65535us; 65535us; 65535us; 65535us; 16428us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16430us; 16431us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16462us; 16463us; 65535us; 16464us; 65535us; 65535us; 16466us; 65535us; 65535us; 16467us; 65535us; 65535us; 16469us; 65535us; 16470us; 16472us; 65535us; 16474us; 16475us; 16476us; 65535us; 16477us; 16478us; 16479us; 16480us; 16481us; 16482us; 16483us; |]
let _fsyacc_reductions ()  =    [| 
# 594 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 603 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "CPar.fsy"
                                                               Prog _1 
                   )
# 50 "CPar.fsy"
                 : Absyn.program));
# 614 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "CPar.fsy"
                                                               [] 
                   )
# 54 "CPar.fsy"
                 : 'Topdecs));
# 624 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "CPar.fsy"
                                                               _1 :: _2 
                   )
# 55 "CPar.fsy"
                 : 'Topdecs));
# 636 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "CPar.fsy"
                                                               Vardec (fst _1, snd _1) 
                   )
# 59 "CPar.fsy"
                 : 'Topdec));
# 647 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Fundec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "CPar.fsy"
                                                               _1 
                   )
# 60 "CPar.fsy"
                 : 'Topdec));
# 658 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "CPar.fsy"
                                                               ((fst _2) _1, snd _2) 
                   )
# 64 "CPar.fsy"
                 : 'Vardec));
# 670 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "CPar.fsy"
                                                               ((fun t -> t), _1)                      
                   )
# 68 "CPar.fsy"
                 : 'Vardesc));
# 681 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "CPar.fsy"
                                                               compose1 TypP _2                        
                   )
# 69 "CPar.fsy"
                 : 'Vardesc));
# 692 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "CPar.fsy"
                                                               _2                                      
                   )
# 70 "CPar.fsy"
                 : 'Vardesc));
# 703 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, None)) _1    
                   )
# 71 "CPar.fsy"
                 : 'Vardesc));
# 714 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, Some _3)) _1 
                   )
# 72 "CPar.fsy"
                 : 'Vardesc));
# 726 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "CPar.fsy"
                                                               Fundec(None,     _2, _4, _6) 
                   )
# 77 "CPar.fsy"
                 : 'Fundec));
# 739 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "CPar.fsy"
                                                               Fundec(Some(_1), _2, _4, _6) 
                   )
# 78 "CPar.fsy"
                 : 'Fundec));
# 753 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "CPar.fsy"
                                                               [] 
                   )
# 82 "CPar.fsy"
                 : 'Paramdecs));
# 763 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "CPar.fsy"
                                                               _1 
                   )
# 83 "CPar.fsy"
                 : 'Paramdecs));
# 774 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "CPar.fsy"
                                                               [_1]     
                   )
# 87 "CPar.fsy"
                 : 'Paramdecs1));
# 785 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 88 "CPar.fsy"
                 : 'Paramdecs1));
# 797 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "CPar.fsy"
                                                               Block _2 
                   )
# 92 "CPar.fsy"
                 : 'Block));
# 808 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "CPar.fsy"
                                                               [] 
                   )
# 96 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 818 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "CPar.fsy"
                                                               Stmt _1 :: _2 
                   )
# 97 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 830 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "CPar.fsy"
                                                               Dec (fst _1, snd _1) :: _3 
                   )
# 98 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 842 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "CPar.fsy"
                                                               _1 
                   )
# 102 "CPar.fsy"
                 : 'Stmt));
# 853 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "CPar.fsy"
                                                               _1 
                   )
# 103 "CPar.fsy"
                 : 'Stmt));
# 864 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "CPar.fsy"
                                                               Expr(_1)             
                   )
# 107 "CPar.fsy"
                 : 'StmtM));
# 875 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "CPar.fsy"
                                                               Return None          
                   )
# 108 "CPar.fsy"
                 : 'StmtM));
# 885 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "CPar.fsy"
                                                               Return(Some(_2))     
                   )
# 109 "CPar.fsy"
                 : 'StmtM));
# 896 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "CPar.fsy"
                                                               _1                   
                   )
# 110 "CPar.fsy"
                 : 'StmtM));
# 907 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 111 "CPar.fsy"
                 : 'StmtM));
# 920 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "CPar.fsy"
                                                               While(_3, _5)        
                   )
# 112 "CPar.fsy"
                 : 'StmtM));
# 932 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "CPar.fsy"
                                                               Do(_2, _5)           
                   )
# 113 "CPar.fsy"
                 : 'StmtM));
# 944 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "CPar.fsy"
                                                                         For(_3, _5, _7, _9) 
                   )
# 114 "CPar.fsy"
                 : 'StmtM));
# 958 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 118 "CPar.fsy"
                 : 'StmtU));
# 971 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "CPar.fsy"
                                                               If(_3, _5, Block []) 
                   )
# 119 "CPar.fsy"
                 : 'StmtU));
# 983 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "CPar.fsy"
                                                               While(_3, _5)        
                   )
# 120 "CPar.fsy"
                 : 'StmtU));
# 995 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "CPar.fsy"
                                                               Do(_2, _5)           
                   )
# 121 "CPar.fsy"
                 : 'StmtU));
# 1007 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "CPar.fsy"
                                                                         For(_3, _5, _7, _9) 
                   )
# 122 "CPar.fsy"
                 : 'StmtU));
# 1021 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "CPar.fsy"
                                                               Access _1           
                   )
# 126 "CPar.fsy"
                 : 'Expr));
# 1032 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "CPar.fsy"
                                                               _1                  
                   )
# 127 "CPar.fsy"
                 : 'Expr));
# 1043 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "CPar.fsy"
                                                               _1                  
                   )
# 131 "CPar.fsy"
                 : 'ExprNotAccess));
# 1054 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "CPar.fsy"
                                                               Assign(_1, _3)      
                   )
# 132 "CPar.fsy"
                 : 'ExprNotAccess));
# 1066 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "CPar.fsy"
                                                               Call(_1, _3)        
                   )
# 133 "CPar.fsy"
                 : 'ExprNotAccess));
# 1078 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "CPar.fsy"
                                                               Prim1("!", _2)      
                   )
# 134 "CPar.fsy"
                 : 'ExprNotAccess));
# 1089 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "CPar.fsy"
                                                               Prim1("printi", _2) 
                   )
# 135 "CPar.fsy"
                 : 'ExprNotAccess));
# 1100 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "CPar.fsy"
                                                               Prim1("printc", nl) 
                   )
# 136 "CPar.fsy"
                 : 'ExprNotAccess));
# 1110 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "CPar.fsy"
                                                               Prim2("+",  _1, _3) 
                   )
# 137 "CPar.fsy"
                 : 'ExprNotAccess));
# 1122 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "CPar.fsy"
                                                               P2("+", _1)         
                   )
# 138 "CPar.fsy"
                 : 'ExprNotAccess));
# 1133 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "CPar.fsy"
                                                               P2("-", _1)         
                   )
# 139 "CPar.fsy"
                 : 'ExprNotAccess));
# 1144 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "CPar.fsy"
                                                               P1(_2, "+")         
                   )
# 140 "CPar.fsy"
                 : 'ExprNotAccess));
# 1155 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "CPar.fsy"
                                                               P1(_2, "-")         
                   )
# 141 "CPar.fsy"
                 : 'ExprNotAccess));
# 1166 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "CPar.fsy"
                                                               A("+", _1, _3)      
                   )
# 142 "CPar.fsy"
                 : 'ExprNotAccess));
# 1178 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "CPar.fsy"
                                                               A("-", _1, _3)      
                   )
# 143 "CPar.fsy"
                 : 'ExprNotAccess));
# 1190 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "CPar.fsy"
                                                               A("*", _1, _3)      
                   )
# 144 "CPar.fsy"
                 : 'ExprNotAccess));
# 1202 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "CPar.fsy"
                                                               A("/", _1, _3)      
                   )
# 145 "CPar.fsy"
                 : 'ExprNotAccess));
# 1214 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "CPar.fsy"
                                                               A("%", _1, _3)      
                   )
# 146 "CPar.fsy"
                 : 'ExprNotAccess));
# 1226 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "CPar.fsy"
                                                               Prim2("-",  _1, _3) 
                   )
# 147 "CPar.fsy"
                 : 'ExprNotAccess));
# 1238 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "CPar.fsy"
                                                               Prim2("*",  _1, _3) 
                   )
# 148 "CPar.fsy"
                 : 'ExprNotAccess));
# 1250 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "CPar.fsy"
                                                               Prim2("/",  _1, _3) 
                   )
# 149 "CPar.fsy"
                 : 'ExprNotAccess));
# 1262 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "CPar.fsy"
                                                               Prim2("%",  _1, _3) 
                   )
# 150 "CPar.fsy"
                 : 'ExprNotAccess));
# 1274 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "CPar.fsy"
                                                               Prim2("==", _1, _3) 
                   )
# 151 "CPar.fsy"
                 : 'ExprNotAccess));
# 1286 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "CPar.fsy"
                                                               Prim2("!=", _1, _3) 
                   )
# 152 "CPar.fsy"
                 : 'ExprNotAccess));
# 1298 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "CPar.fsy"
                                                               Prim2(">",  _1, _3) 
                   )
# 153 "CPar.fsy"
                 : 'ExprNotAccess));
# 1310 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "CPar.fsy"
                                                               Prim2("<",  _1, _3) 
                   )
# 154 "CPar.fsy"
                 : 'ExprNotAccess));
# 1322 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "CPar.fsy"
                                                               Prim2(">=", _1, _3) 
                   )
# 155 "CPar.fsy"
                 : 'ExprNotAccess));
# 1334 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "CPar.fsy"
                                                               Prim2("<=", _1, _3) 
                   )
# 156 "CPar.fsy"
                 : 'ExprNotAccess));
# 1346 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "CPar.fsy"
                                                               Andalso(_1, _3)     
                   )
# 157 "CPar.fsy"
                 : 'ExprNotAccess));
# 1358 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "CPar.fsy"
                                                               Orelse(_1, _3)      
                   )
# 158 "CPar.fsy"
                 : 'ExprNotAccess));
# 1370 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "CPar.fsy"
                                                               Bitand(_1, _3)      
                   )
# 159 "CPar.fsy"
                 : 'ExprNotAccess));
# 1382 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "CPar.fsy"
                                                               Bitor(_1, _3)       
                   )
# 160 "CPar.fsy"
                 : 'ExprNotAccess));
# 1394 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "CPar.fsy"
                                                               Bitxor(_1, _3)      
                   )
# 161 "CPar.fsy"
                 : 'ExprNotAccess));
# 1406 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "CPar.fsy"
                                                               Bitleft(_1, _3)     
                   )
# 162 "CPar.fsy"
                 : 'ExprNotAccess));
# 1418 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "CPar.fsy"
                                                               Bitright(_1, _3)    
                   )
# 163 "CPar.fsy"
                 : 'ExprNotAccess));
# 1430 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "CPar.fsy"
                                                               Bitassign("&",_1, _3)      
                   )
# 164 "CPar.fsy"
                 : 'ExprNotAccess));
# 1442 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "CPar.fsy"
                                                               Bitassign("|",_1, _3)      
                   )
# 165 "CPar.fsy"
                 : 'ExprNotAccess));
# 1454 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "CPar.fsy"
                                                               Bitassign("^",_1, _3)      
                   )
# 166 "CPar.fsy"
                 : 'ExprNotAccess));
# 1466 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "CPar.fsy"
                                                               Bitassign("<<",_1, _3)      
                   )
# 167 "CPar.fsy"
                 : 'ExprNotAccess));
# 1478 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "CPar.fsy"
                                                               Bitassign(">>",_1, _3)      
                   )
# 168 "CPar.fsy"
                 : 'ExprNotAccess));
# 1490 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "CPar.fsy"
                                                               Question(_1, _3, _5)
                   )
# 170 "CPar.fsy"
                 : 'ExprNotAccess));
# 1503 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Const)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "CPar.fsy"
                                                               CstI _1             
                   )
# 174 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1514 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ConstF)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "CPar.fsy"
                                                               CstF _1             
                   )
# 175 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1525 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "CPar.fsy"
                                                               _2                  
                   )
# 176 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1536 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "CPar.fsy"
                                                               Addr _2             
                   )
# 177 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1547 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "CPar.fsy"
                                                               AccVar _1           
                   )
# 181 "CPar.fsy"
                 : 'Access));
# 1558 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "CPar.fsy"
                                                               _2                  
                   )
# 182 "CPar.fsy"
                 : 'Access));
# 1569 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "CPar.fsy"
                                                               AccDeref (Access _2)
                   )
# 183 "CPar.fsy"
                 : 'Access));
# 1580 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "CPar.fsy"
                                                               AccDeref _2         
                   )
# 184 "CPar.fsy"
                 : 'Access));
# 1591 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "CPar.fsy"
                                                               AccIndex(_1, _3)    
                   )
# 185 "CPar.fsy"
                 : 'Access));
# 1603 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "CPar.fsy"
                                                               []       
                   )
# 189 "CPar.fsy"
                 : 'Exprs));
# 1613 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "CPar.fsy"
                                                               _1       
                   )
# 190 "CPar.fsy"
                 : 'Exprs));
# 1624 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 194 "CPar.fsy"
                                                               [_1]     
                   )
# 194 "CPar.fsy"
                 : 'Exprs1));
# 1635 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 195 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 195 "CPar.fsy"
                 : 'Exprs1));
# 1647 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 199 "CPar.fsy"
                                                               _1       
                   )
# 199 "CPar.fsy"
                 : 'Const));
# 1658 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "CPar.fsy"
                                                               _1       
                   )
# 200 "CPar.fsy"
                 : 'Const));
# 1669 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "CPar.fsy"
                                                               - _2     
                   )
# 201 "CPar.fsy"
                 : 'Const));
# 1680 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 202 "CPar.fsy"
                                                               -1       
                   )
# 202 "CPar.fsy"
                 : 'Const));
# 1690 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 206 "CPar.fsy"
                                                               _1       
                   )
# 206 "CPar.fsy"
                 : 'ConstF));
# 1701 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 207 "CPar.fsy"
                                                               - _2     
                   )
# 207 "CPar.fsy"
                 : 'ConstF));
# 1712 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 210 "CPar.fsy"
                                                               TypI     
                   )
# 210 "CPar.fsy"
                 : 'Type));
# 1722 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 211 "CPar.fsy"
                                                               TypC     
                   )
# 211 "CPar.fsy"
                 : 'Type));
# 1732 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 212 "CPar.fsy"
                                                               TypF     
                   )
# 212 "CPar.fsy"
                 : 'Type));
|]
# 1743 "CPar.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 70;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
