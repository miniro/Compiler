// Implementation file for parser generated by fsyacc
module CPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "CPar.fsy"

(*	File MicroC/CPar.fsy 
	Parser specification for micro-C, a small imperative language
	sestoft@itu.dk * 2009-09-29
	No (real) shift/reduce conflicts thanks to Niels Kokholm.
*)

open Absyn

// Vardesc 返回的是一个 元组 (g,s)
// g是类型构造函数，s是变量名

let compose1 f (g, s) = ((fun x -> g(f(x))), s)
let nl = CstI 10

# 22 "CPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | PLUSASSIGN
  | MINUSASSIGN
  | TIMESASSIGN
  | DIVASSIGN
  | MODASSIGN
  | COLON
  | QUESTION
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | SEMI
  | COMMA
  | ASSIGN
  | AMP
  | NOT
  | SEQOR
  | SEQAND
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | PLUSONE
  | MINUSONE
  | CHAR
  | ELSE
  | IF
  | INT
  | NULL
  | PRINT
  | PRINTLN
  | RETURN
  | VOID
  | WHILE
  | DO
  | SWITCH
  | CASE
  | CSTSTRING of (string)
  | NAME of (string)
  | CSTINT of (int)
  | CSTBOOL of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_PLUSASSIGN
    | TOKEN_MINUSASSIGN
    | TOKEN_TIMESASSIGN
    | TOKEN_DIVASSIGN
    | TOKEN_MODASSIGN
    | TOKEN_COLON
    | TOKEN_QUESTION
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_SEMI
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_AMP
    | TOKEN_NOT
    | TOKEN_SEQOR
    | TOKEN_SEQAND
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_PLUSONE
    | TOKEN_MINUSONE
    | TOKEN_CHAR
    | TOKEN_ELSE
    | TOKEN_IF
    | TOKEN_INT
    | TOKEN_NULL
    | TOKEN_PRINT
    | TOKEN_PRINTLN
    | TOKEN_RETURN
    | TOKEN_VOID
    | TOKEN_WHILE
    | TOKEN_DO
    | TOKEN_SWITCH
    | TOKEN_CASE
    | TOKEN_CSTSTRING
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_CSTBOOL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Topdecs
    | NONTERM_Topdec
    | NONTERM_Vardec
    | NONTERM_Vardesc
    | NONTERM_Fundec
    | NONTERM_Paramdecs
    | NONTERM_Paramdecs1
    | NONTERM_Block
    | NONTERM_StmtOrDecSeq
    | NONTERM_Stmt
    | NONTERM_StmtM
    | NONTERM_StmtU
    | NONTERM_Casedecs
    | NONTERM_Casedec
    | NONTERM_Expr
    | NONTERM_ExprNotAccess
    | NONTERM_AtExprNotAccess
    | NONTERM_Access
    | NONTERM_Exprs
    | NONTERM_Exprs1
    | NONTERM_Const
    | NONTERM_Type

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | PLUSASSIGN  -> 1 
  | MINUSASSIGN  -> 2 
  | TIMESASSIGN  -> 3 
  | DIVASSIGN  -> 4 
  | MODASSIGN  -> 5 
  | COLON  -> 6 
  | QUESTION  -> 7 
  | LPAR  -> 8 
  | RPAR  -> 9 
  | LBRACE  -> 10 
  | RBRACE  -> 11 
  | LBRACK  -> 12 
  | RBRACK  -> 13 
  | SEMI  -> 14 
  | COMMA  -> 15 
  | ASSIGN  -> 16 
  | AMP  -> 17 
  | NOT  -> 18 
  | SEQOR  -> 19 
  | SEQAND  -> 20 
  | EQ  -> 21 
  | NE  -> 22 
  | GT  -> 23 
  | LT  -> 24 
  | GE  -> 25 
  | LE  -> 26 
  | PLUS  -> 27 
  | MINUS  -> 28 
  | TIMES  -> 29 
  | DIV  -> 30 
  | MOD  -> 31 
  | PLUSONE  -> 32 
  | MINUSONE  -> 33 
  | CHAR  -> 34 
  | ELSE  -> 35 
  | IF  -> 36 
  | INT  -> 37 
  | NULL  -> 38 
  | PRINT  -> 39 
  | PRINTLN  -> 40 
  | RETURN  -> 41 
  | VOID  -> 42 
  | WHILE  -> 43 
  | DO  -> 44 
  | SWITCH  -> 45 
  | CASE  -> 46 
  | CSTSTRING _ -> 47 
  | NAME _ -> 48 
  | CSTINT _ -> 49 
  | CSTBOOL _ -> 50 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_PLUSASSIGN 
  | 2 -> TOKEN_MINUSASSIGN 
  | 3 -> TOKEN_TIMESASSIGN 
  | 4 -> TOKEN_DIVASSIGN 
  | 5 -> TOKEN_MODASSIGN 
  | 6 -> TOKEN_COLON 
  | 7 -> TOKEN_QUESTION 
  | 8 -> TOKEN_LPAR 
  | 9 -> TOKEN_RPAR 
  | 10 -> TOKEN_LBRACE 
  | 11 -> TOKEN_RBRACE 
  | 12 -> TOKEN_LBRACK 
  | 13 -> TOKEN_RBRACK 
  | 14 -> TOKEN_SEMI 
  | 15 -> TOKEN_COMMA 
  | 16 -> TOKEN_ASSIGN 
  | 17 -> TOKEN_AMP 
  | 18 -> TOKEN_NOT 
  | 19 -> TOKEN_SEQOR 
  | 20 -> TOKEN_SEQAND 
  | 21 -> TOKEN_EQ 
  | 22 -> TOKEN_NE 
  | 23 -> TOKEN_GT 
  | 24 -> TOKEN_LT 
  | 25 -> TOKEN_GE 
  | 26 -> TOKEN_LE 
  | 27 -> TOKEN_PLUS 
  | 28 -> TOKEN_MINUS 
  | 29 -> TOKEN_TIMES 
  | 30 -> TOKEN_DIV 
  | 31 -> TOKEN_MOD 
  | 32 -> TOKEN_PLUSONE 
  | 33 -> TOKEN_MINUSONE 
  | 34 -> TOKEN_CHAR 
  | 35 -> TOKEN_ELSE 
  | 36 -> TOKEN_IF 
  | 37 -> TOKEN_INT 
  | 38 -> TOKEN_NULL 
  | 39 -> TOKEN_PRINT 
  | 40 -> TOKEN_PRINTLN 
  | 41 -> TOKEN_RETURN 
  | 42 -> TOKEN_VOID 
  | 43 -> TOKEN_WHILE 
  | 44 -> TOKEN_DO 
  | 45 -> TOKEN_SWITCH 
  | 46 -> TOKEN_CASE 
  | 47 -> TOKEN_CSTSTRING 
  | 48 -> TOKEN_NAME 
  | 49 -> TOKEN_CSTINT 
  | 50 -> TOKEN_CSTBOOL 
  | 53 -> TOKEN_end_of_input
  | 51 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Topdecs 
    | 3 -> NONTERM_Topdecs 
    | 4 -> NONTERM_Topdec 
    | 5 -> NONTERM_Topdec 
    | 6 -> NONTERM_Vardec 
    | 7 -> NONTERM_Vardesc 
    | 8 -> NONTERM_Vardesc 
    | 9 -> NONTERM_Vardesc 
    | 10 -> NONTERM_Vardesc 
    | 11 -> NONTERM_Vardesc 
    | 12 -> NONTERM_Fundec 
    | 13 -> NONTERM_Fundec 
    | 14 -> NONTERM_Paramdecs 
    | 15 -> NONTERM_Paramdecs 
    | 16 -> NONTERM_Paramdecs1 
    | 17 -> NONTERM_Paramdecs1 
    | 18 -> NONTERM_Block 
    | 19 -> NONTERM_StmtOrDecSeq 
    | 20 -> NONTERM_StmtOrDecSeq 
    | 21 -> NONTERM_StmtOrDecSeq 
    | 22 -> NONTERM_Stmt 
    | 23 -> NONTERM_Stmt 
    | 24 -> NONTERM_StmtM 
    | 25 -> NONTERM_StmtM 
    | 26 -> NONTERM_StmtM 
    | 27 -> NONTERM_StmtM 
    | 28 -> NONTERM_StmtM 
    | 29 -> NONTERM_StmtM 
    | 30 -> NONTERM_StmtM 
    | 31 -> NONTERM_StmtM 
    | 32 -> NONTERM_StmtU 
    | 33 -> NONTERM_StmtU 
    | 34 -> NONTERM_StmtU 
    | 35 -> NONTERM_StmtU 
    | 36 -> NONTERM_StmtU 
    | 37 -> NONTERM_Casedecs 
    | 38 -> NONTERM_Casedec 
    | 39 -> NONTERM_Expr 
    | 40 -> NONTERM_Expr 
    | 41 -> NONTERM_ExprNotAccess 
    | 42 -> NONTERM_ExprNotAccess 
    | 43 -> NONTERM_ExprNotAccess 
    | 44 -> NONTERM_ExprNotAccess 
    | 45 -> NONTERM_ExprNotAccess 
    | 46 -> NONTERM_ExprNotAccess 
    | 47 -> NONTERM_ExprNotAccess 
    | 48 -> NONTERM_ExprNotAccess 
    | 49 -> NONTERM_ExprNotAccess 
    | 50 -> NONTERM_ExprNotAccess 
    | 51 -> NONTERM_ExprNotAccess 
    | 52 -> NONTERM_ExprNotAccess 
    | 53 -> NONTERM_ExprNotAccess 
    | 54 -> NONTERM_ExprNotAccess 
    | 55 -> NONTERM_ExprNotAccess 
    | 56 -> NONTERM_ExprNotAccess 
    | 57 -> NONTERM_ExprNotAccess 
    | 58 -> NONTERM_ExprNotAccess 
    | 59 -> NONTERM_ExprNotAccess 
    | 60 -> NONTERM_ExprNotAccess 
    | 61 -> NONTERM_ExprNotAccess 
    | 62 -> NONTERM_ExprNotAccess 
    | 63 -> NONTERM_ExprNotAccess 
    | 64 -> NONTERM_ExprNotAccess 
    | 65 -> NONTERM_ExprNotAccess 
    | 66 -> NONTERM_ExprNotAccess 
    | 67 -> NONTERM_ExprNotAccess 
    | 68 -> NONTERM_ExprNotAccess 
    | 69 -> NONTERM_ExprNotAccess 
    | 70 -> NONTERM_AtExprNotAccess 
    | 71 -> NONTERM_AtExprNotAccess 
    | 72 -> NONTERM_AtExprNotAccess 
    | 73 -> NONTERM_Access 
    | 74 -> NONTERM_Access 
    | 75 -> NONTERM_Access 
    | 76 -> NONTERM_Access 
    | 77 -> NONTERM_Access 
    | 78 -> NONTERM_Exprs 
    | 79 -> NONTERM_Exprs 
    | 80 -> NONTERM_Exprs1 
    | 81 -> NONTERM_Exprs1 
    | 82 -> NONTERM_Const 
    | 83 -> NONTERM_Const 
    | 84 -> NONTERM_Const 
    | 85 -> NONTERM_Const 
    | 86 -> NONTERM_Type 
    | 87 -> NONTERM_Type 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 53 
let _fsyacc_tagOfErrorTerminal = 51

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | PLUSASSIGN  -> "PLUSASSIGN" 
  | MINUSASSIGN  -> "MINUSASSIGN" 
  | TIMESASSIGN  -> "TIMESASSIGN" 
  | DIVASSIGN  -> "DIVASSIGN" 
  | MODASSIGN  -> "MODASSIGN" 
  | COLON  -> "COLON" 
  | QUESTION  -> "QUESTION" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | SEMI  -> "SEMI" 
  | COMMA  -> "COMMA" 
  | ASSIGN  -> "ASSIGN" 
  | AMP  -> "AMP" 
  | NOT  -> "NOT" 
  | SEQOR  -> "SEQOR" 
  | SEQAND  -> "SEQAND" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | PLUSONE  -> "PLUSONE" 
  | MINUSONE  -> "MINUSONE" 
  | CHAR  -> "CHAR" 
  | ELSE  -> "ELSE" 
  | IF  -> "IF" 
  | INT  -> "INT" 
  | NULL  -> "NULL" 
  | PRINT  -> "PRINT" 
  | PRINTLN  -> "PRINTLN" 
  | RETURN  -> "RETURN" 
  | VOID  -> "VOID" 
  | WHILE  -> "WHILE" 
  | DO  -> "DO" 
  | SWITCH  -> "SWITCH" 
  | CASE  -> "CASE" 
  | CSTSTRING _ -> "CSTSTRING" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 
  | CSTBOOL _ -> "CSTBOOL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | PLUSASSIGN  -> (null : System.Object) 
  | MINUSASSIGN  -> (null : System.Object) 
  | TIMESASSIGN  -> (null : System.Object) 
  | DIVASSIGN  -> (null : System.Object) 
  | MODASSIGN  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | QUESTION  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | SEQOR  -> (null : System.Object) 
  | SEQAND  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | PLUSONE  -> (null : System.Object) 
  | MINUSONE  -> (null : System.Object) 
  | CHAR  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | PRINTLN  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | VOID  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | SWITCH  -> (null : System.Object) 
  | CASE  -> (null : System.Object) 
  | CSTSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 4us; 5us; 2us; 65535us; 0us; 4us; 4us; 4us; 8us; 65535us; 0us; 6us; 4us; 6us; 25us; 34us; 29us; 34us; 35us; 34us; 37us; 42us; 40us; 42us; 43us; 42us; 4us; 65535us; 9us; 11us; 10us; 11us; 14us; 15us; 16us; 17us; 2us; 65535us; 0us; 8us; 4us; 8us; 2us; 65535us; 25us; 26us; 29us; 30us; 3us; 65535us; 25us; 33us; 29us; 33us; 35us; 36us; 10us; 65535us; 27us; 28us; 31us; 32us; 37us; 54us; 40us; 54us; 43us; 54us; 58us; 54us; 59us; 54us; 69us; 54us; 71us; 54us; 89us; 54us; 3us; 65535us; 37us; 38us; 40us; 41us; 43us; 44us; 5us; 65535us; 37us; 40us; 40us; 40us; 43us; 40us; 58us; 78us; 89us; 90us; 8us; 65535us; 37us; 45us; 40us; 45us; 43us; 45us; 58us; 46us; 59us; 60us; 69us; 70us; 71us; 72us; 89us; 45us; 8us; 65535us; 37us; 47us; 40us; 47us; 43us; 47us; 58us; 47us; 59us; 77us; 69us; 79us; 71us; 80us; 89us; 47us; 2us; 65535us; 64us; 65us; 85us; 86us; 2us; 65535us; 64us; 85us; 85us; 85us; 42us; 65535us; 37us; 48us; 40us; 48us; 43us; 48us; 50us; 52us; 56us; 57us; 58us; 48us; 59us; 48us; 62us; 63us; 67us; 68us; 69us; 48us; 71us; 48us; 74us; 75us; 82us; 83us; 87us; 88us; 89us; 48us; 96us; 97us; 99us; 129us; 102us; 103us; 104us; 105us; 130us; 107us; 137us; 108us; 138us; 109us; 139us; 110us; 140us; 111us; 141us; 112us; 142us; 113us; 143us; 114us; 144us; 115us; 145us; 116us; 146us; 117us; 147us; 118us; 148us; 119us; 149us; 120us; 150us; 121us; 151us; 122us; 152us; 123us; 153us; 124us; 154us; 126us; 155us; 127us; 157us; 125us; 168us; 128us; 171us; 129us; 42us; 65535us; 37us; 93us; 40us; 93us; 43us; 93us; 50us; 93us; 56us; 93us; 58us; 93us; 59us; 93us; 62us; 93us; 67us; 93us; 69us; 93us; 71us; 93us; 74us; 93us; 82us; 93us; 87us; 93us; 89us; 93us; 96us; 93us; 99us; 93us; 102us; 93us; 104us; 93us; 130us; 93us; 137us; 93us; 138us; 93us; 139us; 93us; 140us; 93us; 141us; 93us; 142us; 93us; 143us; 93us; 144us; 93us; 145us; 93us; 146us; 93us; 147us; 93us; 148us; 93us; 149us; 93us; 150us; 93us; 151us; 93us; 152us; 93us; 153us; 93us; 154us; 93us; 155us; 93us; 157us; 94us; 168us; 93us; 171us; 93us; 43us; 65535us; 37us; 95us; 40us; 95us; 43us; 95us; 50us; 95us; 56us; 95us; 58us; 95us; 59us; 95us; 62us; 95us; 67us; 95us; 69us; 95us; 71us; 95us; 74us; 95us; 82us; 95us; 87us; 95us; 89us; 95us; 96us; 95us; 99us; 95us; 102us; 95us; 104us; 95us; 130us; 95us; 137us; 95us; 138us; 95us; 139us; 95us; 140us; 95us; 141us; 95us; 142us; 95us; 143us; 95us; 144us; 95us; 145us; 95us; 146us; 95us; 147us; 95us; 148us; 95us; 149us; 95us; 150us; 95us; 151us; 95us; 152us; 95us; 153us; 95us; 154us; 95us; 155us; 95us; 157us; 95us; 165us; 167us; 168us; 95us; 171us; 95us; 47us; 65535us; 37us; 92us; 40us; 92us; 43us; 92us; 50us; 92us; 56us; 92us; 58us; 92us; 59us; 92us; 62us; 92us; 67us; 92us; 69us; 92us; 71us; 92us; 74us; 92us; 82us; 92us; 87us; 92us; 89us; 92us; 96us; 92us; 99us; 92us; 102us; 92us; 104us; 92us; 130us; 92us; 133us; 134us; 135us; 136us; 137us; 92us; 138us; 92us; 139us; 92us; 140us; 92us; 141us; 92us; 142us; 92us; 143us; 92us; 144us; 92us; 145us; 92us; 146us; 92us; 147us; 92us; 148us; 92us; 149us; 92us; 150us; 92us; 151us; 92us; 152us; 92us; 153us; 92us; 154us; 92us; 155us; 92us; 157us; 91us; 159us; 160us; 162us; 163us; 165us; 166us; 168us; 92us; 171us; 92us; 1us; 65535us; 99us; 100us; 2us; 65535us; 99us; 170us; 171us; 172us; 43us; 65535us; 37us; 156us; 40us; 156us; 43us; 156us; 50us; 156us; 56us; 156us; 58us; 156us; 59us; 156us; 62us; 156us; 67us; 156us; 69us; 156us; 71us; 156us; 74us; 156us; 82us; 156us; 87us; 156us; 89us; 156us; 96us; 156us; 99us; 156us; 102us; 156us; 104us; 156us; 130us; 156us; 137us; 156us; 138us; 156us; 139us; 156us; 140us; 156us; 141us; 156us; 142us; 156us; 143us; 156us; 144us; 156us; 145us; 156us; 146us; 156us; 147us; 156us; 148us; 156us; 149us; 156us; 150us; 156us; 151us; 156us; 152us; 156us; 153us; 156us; 154us; 156us; 155us; 156us; 157us; 156us; 165us; 156us; 168us; 156us; 171us; 156us; 8us; 65535us; 0us; 10us; 4us; 10us; 25us; 9us; 29us; 9us; 35us; 9us; 37us; 9us; 40us; 9us; 43us; 9us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; 18us; 23us; 26us; 29us; 33us; 44us; 48us; 54us; 63us; 72us; 75us; 78us; 121us; 164us; 208us; 256us; 258us; 261us; 305us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 2us; 6us; 13us; 3us; 6us; 10us; 11us; 1us; 7us; 2us; 7us; 13us; 1us; 8us; 3us; 8us; 10us; 11us; 1us; 9us; 3us; 9us; 10us; 11us; 1us; 9us; 2us; 10us; 11us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 15us; 2us; 16us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 22us; 3us; 22us; 28us; 32us; 1us; 23us; 15us; 24us; 47us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 1us; 24us; 2us; 25us; 26us; 1us; 25us; 15us; 26us; 47us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 1us; 26us; 1us; 27us; 3us; 28us; 32us; 33us; 3us; 28us; 32us; 33us; 17us; 28us; 32us; 33us; 47us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 3us; 28us; 32us; 33us; 2us; 28us; 32us; 1us; 28us; 2us; 29us; 34us; 2us; 29us; 34us; 16us; 29us; 34us; 47us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 2us; 29us; 34us; 2us; 29us; 34us; 2us; 30us; 35us; 2us; 30us; 35us; 16us; 30us; 35us; 47us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 2us; 30us; 35us; 1us; 30us; 2us; 31us; 36us; 1us; 31us; 1us; 31us; 1us; 31us; 15us; 31us; 47us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 35us; 1us; 36us; 1us; 36us; 1us; 36us; 15us; 36us; 47us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 1us; 36us; 1us; 37us; 1us; 37us; 1us; 38us; 15us; 38us; 47us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 1us; 38us; 1us; 38us; 11us; 39us; 42us; 48us; 49us; 52us; 53us; 54us; 55us; 56us; 74us; 77us; 10us; 39us; 42us; 48us; 49us; 52us; 53us; 54us; 55us; 56us; 77us; 1us; 40us; 2us; 40us; 71us; 1us; 41us; 1us; 42us; 15us; 42us; 47us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 2us; 43us; 73us; 1us; 43us; 1us; 43us; 1us; 43us; 1us; 44us; 15us; 44us; 47us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 1us; 45us; 15us; 45us; 47us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 1us; 46us; 15us; 47us; 47us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 15us; 47us; 52us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 15us; 47us; 53us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 15us; 47us; 54us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 15us; 47us; 55us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 15us; 47us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 15us; 47us; 57us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 15us; 47us; 57us; 58us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 15us; 47us; 57us; 58us; 59us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 15us; 47us; 57us; 58us; 59us; 60us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 15us; 47us; 57us; 58us; 59us; 60us; 61us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 15us; 47us; 57us; 58us; 59us; 60us; 61us; 62us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 15us; 47us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 15us; 47us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 64us; 65us; 66us; 67us; 68us; 69us; 15us; 47us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 65us; 66us; 67us; 68us; 69us; 15us; 47us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 66us; 67us; 68us; 69us; 15us; 47us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 67us; 68us; 69us; 15us; 47us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 68us; 69us; 14us; 47us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 15us; 47us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 69us; 15us; 47us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 69us; 15us; 47us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 77us; 16us; 47us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 80us; 81us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 2us; 50us; 77us; 1us; 51us; 2us; 51us; 77us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 64us; 1us; 65us; 1us; 66us; 1us; 67us; 1us; 68us; 1us; 69us; 1us; 69us; 1us; 70us; 2us; 71us; 74us; 1us; 71us; 1us; 72us; 2us; 72us; 77us; 1us; 73us; 1us; 74us; 2us; 74us; 77us; 1us; 74us; 2us; 75us; 76us; 2us; 75us; 77us; 1us; 76us; 1us; 77us; 1us; 77us; 1us; 79us; 1us; 81us; 1us; 81us; 1us; 82us; 1us; 83us; 1us; 84us; 1us; 84us; 1us; 85us; 1us; 86us; 1us; 87us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 23us; 27us; 29us; 32us; 34us; 38us; 40us; 44us; 46us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 80us; 82us; 84us; 86us; 88us; 90us; 92us; 94us; 96us; 98us; 100us; 102us; 106us; 108us; 124us; 126us; 129us; 131us; 147us; 149us; 151us; 155us; 159us; 177us; 181us; 184us; 186us; 189us; 192us; 209us; 212us; 215us; 218us; 221us; 238us; 241us; 243us; 246us; 248us; 250us; 252us; 268us; 270us; 272us; 274us; 276us; 278us; 280us; 282us; 298us; 300us; 302us; 304us; 306us; 322us; 324us; 326us; 338us; 349us; 351us; 354us; 356us; 358us; 374us; 377us; 379us; 381us; 383us; 385us; 401us; 403us; 419us; 421us; 437us; 453us; 469us; 485us; 501us; 517us; 533us; 549us; 565us; 581us; 597us; 613us; 629us; 645us; 661us; 677us; 693us; 709us; 724us; 740us; 756us; 772us; 789us; 791us; 793us; 795us; 797us; 800us; 802us; 805us; 807us; 809us; 811us; 813us; 815us; 817us; 819us; 821us; 823us; 825us; 827us; 829us; 831us; 833us; 835us; 837us; 839us; 841us; 843us; 845us; 848us; 850us; 852us; 855us; 857us; 859us; 862us; 864us; 867us; 870us; 872us; 874us; 876us; 878us; 880us; 882us; 884us; 886us; 888us; 890us; 892us; 894us; |]
let _fsyacc_action_rows = 180
let _fsyacc_actionTableElements = [|3us; 16386us; 34us; 179us; 37us; 178us; 42us; 23us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 3us; 16386us; 34us; 179us; 37us; 178us; 42us; 23us; 0us; 16387us; 1us; 32768us; 14us; 7us; 0us; 16388us; 0us; 16389us; 3us; 32768us; 8us; 16us; 29us; 14us; 48us; 12us; 3us; 32768us; 8us; 16us; 29us; 14us; 48us; 13us; 1us; 16390us; 12us; 19us; 0us; 16391us; 1us; 16391us; 8us; 29us; 3us; 32768us; 8us; 16us; 29us; 14us; 48us; 12us; 1us; 16392us; 12us; 19us; 3us; 32768us; 8us; 16us; 29us; 14us; 48us; 12us; 2us; 32768us; 9us; 18us; 12us; 19us; 0us; 16393us; 2us; 32768us; 13us; 20us; 49us; 21us; 0us; 16394us; 1us; 32768us; 13us; 22us; 0us; 16395us; 1us; 32768us; 48us; 24us; 1us; 32768us; 8us; 25us; 2us; 16398us; 34us; 179us; 37us; 178us; 1us; 32768us; 9us; 27us; 1us; 32768us; 10us; 37us; 0us; 16396us; 2us; 16398us; 34us; 179us; 37us; 178us; 1us; 32768us; 9us; 31us; 1us; 32768us; 10us; 37us; 0us; 16397us; 0us; 16399us; 1us; 16400us; 15us; 35us; 2us; 32768us; 34us; 179us; 37us; 178us; 0us; 16401us; 21us; 16403us; 8us; 157us; 10us; 37us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 34us; 179us; 36us; 55us; 37us; 178us; 38us; 177us; 39us; 104us; 40us; 106us; 41us; 50us; 43us; 66us; 44us; 71us; 45us; 61us; 48us; 98us; 49us; 173us; 50us; 174us; 1us; 32768us; 11us; 39us; 0us; 16402us; 21us; 16403us; 8us; 157us; 10us; 37us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 34us; 179us; 36us; 55us; 37us; 178us; 38us; 177us; 39us; 104us; 40us; 106us; 41us; 50us; 43us; 66us; 44us; 71us; 45us; 61us; 48us; 98us; 49us; 173us; 50us; 174us; 0us; 16404us; 1us; 32768us; 14us; 43us; 21us; 16403us; 8us; 157us; 10us; 37us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 34us; 179us; 36us; 55us; 37us; 178us; 38us; 177us; 39us; 104us; 40us; 106us; 41us; 50us; 43us; 66us; 44us; 71us; 45us; 61us; 48us; 98us; 49us; 173us; 50us; 174us; 0us; 16405us; 0us; 16406us; 1us; 16406us; 35us; 59us; 0us; 16407us; 15us; 32768us; 7us; 154us; 14us; 49us; 19us; 153us; 20us; 152us; 21us; 146us; 22us; 147us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 0us; 16408us; 14us; 32768us; 8us; 157us; 14us; 51us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 0us; 16409us; 15us; 32768us; 7us; 154us; 14us; 53us; 19us; 153us; 20us; 152us; 21us; 146us; 22us; 147us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 0us; 16410us; 0us; 16411us; 1us; 32768us; 8us; 56us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 15us; 32768us; 7us; 154us; 9us; 58us; 19us; 153us; 20us; 152us; 21us; 146us; 22us; 147us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 19us; 32768us; 8us; 157us; 10us; 37us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 36us; 55us; 38us; 177us; 39us; 104us; 40us; 106us; 41us; 50us; 43us; 66us; 44us; 71us; 45us; 61us; 48us; 98us; 49us; 173us; 50us; 174us; 19us; 32768us; 8us; 157us; 10us; 37us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 36us; 55us; 38us; 177us; 39us; 104us; 40us; 106us; 41us; 50us; 43us; 66us; 44us; 71us; 45us; 61us; 48us; 98us; 49us; 173us; 50us; 174us; 0us; 16412us; 1us; 32768us; 8us; 62us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 15us; 32768us; 7us; 154us; 9us; 64us; 19us; 153us; 20us; 152us; 21us; 146us; 22us; 147us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 1us; 32768us; 46us; 87us; 0us; 16413us; 1us; 32768us; 8us; 67us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 15us; 32768us; 7us; 154us; 9us; 69us; 19us; 153us; 20us; 152us; 21us; 146us; 22us; 147us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 19us; 32768us; 8us; 157us; 10us; 37us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 36us; 55us; 38us; 177us; 39us; 104us; 40us; 106us; 41us; 50us; 43us; 66us; 44us; 71us; 45us; 61us; 48us; 98us; 49us; 173us; 50us; 174us; 0us; 16414us; 19us; 32768us; 8us; 157us; 10us; 37us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 36us; 55us; 38us; 177us; 39us; 104us; 40us; 106us; 41us; 50us; 43us; 66us; 44us; 71us; 45us; 61us; 48us; 98us; 49us; 173us; 50us; 174us; 1us; 32768us; 43us; 73us; 1us; 32768us; 8us; 74us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 15us; 32768us; 7us; 154us; 9us; 76us; 19us; 153us; 20us; 152us; 21us; 146us; 22us; 147us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 0us; 16415us; 0us; 16416us; 0us; 16417us; 0us; 16419us; 1us; 32768us; 43us; 81us; 1us; 32768us; 8us; 82us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 15us; 32768us; 7us; 154us; 9us; 84us; 19us; 153us; 20us; 152us; 21us; 146us; 22us; 147us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 0us; 16420us; 1us; 32768us; 46us; 87us; 0us; 16421us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 15us; 32768us; 6us; 89us; 7us; 154us; 19us; 153us; 20us; 152us; 21us; 146us; 22us; 147us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 19us; 32768us; 8us; 157us; 10us; 37us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 36us; 55us; 38us; 177us; 39us; 104us; 40us; 106us; 41us; 50us; 43us; 66us; 44us; 71us; 45us; 61us; 48us; 98us; 49us; 173us; 50us; 174us; 0us; 16422us; 10us; 16423us; 1us; 137us; 2us; 138us; 3us; 139us; 4us; 140us; 5us; 141us; 9us; 164us; 12us; 168us; 16us; 96us; 32us; 131us; 33us; 132us; 9us; 16423us; 1us; 137us; 2us; 138us; 3us; 139us; 4us; 140us; 5us; 141us; 12us; 168us; 16us; 96us; 32us; 131us; 33us; 132us; 0us; 16424us; 1us; 16424us; 9us; 158us; 0us; 16425us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 14us; 16426us; 7us; 154us; 19us; 153us; 20us; 152us; 21us; 146us; 22us; 147us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 1us; 16457us; 8us; 99us; 13us; 16462us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 1us; 32768us; 9us; 101us; 0us; 16427us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 1us; 16428us; 7us; 154us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 14us; 16429us; 7us; 154us; 19us; 153us; 20us; 152us; 21us; 146us; 22us; 147us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 0us; 16430us; 4us; 16431us; 7us; 154us; 29us; 143us; 30us; 144us; 31us; 145us; 14us; 16436us; 7us; 154us; 19us; 153us; 20us; 152us; 21us; 146us; 22us; 147us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 14us; 16437us; 7us; 154us; 19us; 153us; 20us; 152us; 21us; 146us; 22us; 147us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 14us; 16438us; 7us; 154us; 19us; 153us; 20us; 152us; 21us; 146us; 22us; 147us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 14us; 16439us; 7us; 154us; 19us; 153us; 20us; 152us; 21us; 146us; 22us; 147us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 14us; 16440us; 7us; 154us; 19us; 153us; 20us; 152us; 21us; 146us; 22us; 147us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 4us; 16441us; 7us; 154us; 29us; 143us; 30us; 144us; 31us; 145us; 1us; 16442us; 7us; 154us; 1us; 16443us; 7us; 154us; 1us; 16444us; 7us; 154us; 10us; 16445us; 7us; 154us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 10us; 16446us; 7us; 154us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 10us; 16447us; 7us; 154us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 10us; 16448us; 7us; 154us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 10us; 16449us; 7us; 154us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 10us; 16450us; 7us; 154us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 12us; 16451us; 7us; 154us; 21us; 146us; 22us; 147us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 13us; 16452us; 7us; 154us; 20us; 152us; 21us; 146us; 22us; 147us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 14us; 32768us; 7us; 154us; 19us; 153us; 20us; 152us; 21us; 146us; 22us; 147us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 15us; 32768us; 6us; 155us; 7us; 154us; 19us; 153us; 20us; 152us; 21us; 146us; 22us; 147us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 14us; 16453us; 7us; 154us; 19us; 153us; 20us; 152us; 21us; 146us; 22us; 147us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 15us; 32768us; 7us; 154us; 13us; 169us; 19us; 153us; 20us; 152us; 21us; 146us; 22us; 147us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 15us; 16464us; 7us; 154us; 15us; 171us; 19us; 153us; 20us; 152us; 21us; 146us; 22us; 147us; 23us; 148us; 24us; 149us; 25us; 150us; 26us; 151us; 27us; 130us; 28us; 142us; 29us; 143us; 30us; 144us; 31us; 145us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 0us; 16432us; 0us; 16433us; 3us; 32768us; 8us; 162us; 29us; 165us; 48us; 161us; 1us; 16434us; 12us; 168us; 3us; 32768us; 8us; 162us; 29us; 165us; 48us; 161us; 1us; 16435us; 12us; 168us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 0us; 16454us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 0us; 16455us; 3us; 32768us; 8us; 162us; 29us; 165us; 48us; 161us; 1us; 16456us; 12us; 168us; 0us; 16457us; 3us; 32768us; 8us; 162us; 29us; 165us; 48us; 161us; 2us; 32768us; 9us; 164us; 12us; 168us; 0us; 16458us; 8us; 32768us; 8us; 157us; 17us; 159us; 28us; 175us; 29us; 165us; 38us; 177us; 48us; 161us; 49us; 173us; 50us; 174us; 1us; 16459us; 12us; 168us; 0us; 16460us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 0us; 16461us; 0us; 16463us; 13us; 32768us; 8us; 157us; 17us; 159us; 18us; 102us; 28us; 175us; 29us; 165us; 32us; 133us; 33us; 135us; 38us; 177us; 39us; 104us; 40us; 106us; 48us; 98us; 49us; 173us; 50us; 174us; 0us; 16465us; 0us; 16466us; 0us; 16467us; 1us; 32768us; 49us; 176us; 0us; 16468us; 0us; 16469us; 0us; 16470us; 0us; 16471us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 5us; 7us; 8us; 12us; 13us; 15us; 16us; 17us; 21us; 25us; 27us; 28us; 30us; 34us; 36us; 40us; 43us; 44us; 47us; 48us; 50us; 51us; 53us; 55us; 58us; 60us; 62us; 63us; 66us; 68us; 70us; 71us; 72us; 74us; 77us; 78us; 100us; 102us; 103us; 125us; 126us; 128us; 150us; 151us; 152us; 154us; 155us; 171us; 172us; 187us; 188us; 204us; 205us; 206us; 208us; 222us; 238us; 258us; 278us; 279us; 281us; 295us; 311us; 313us; 314us; 316us; 330us; 346us; 366us; 367us; 387us; 389us; 391us; 405us; 421us; 422us; 423us; 424us; 425us; 427us; 429us; 443us; 459us; 460us; 462us; 463us; 477us; 493us; 513us; 514us; 525us; 535us; 536us; 538us; 539us; 553us; 568us; 570us; 584us; 586us; 587us; 601us; 603us; 617us; 632us; 633us; 638us; 653us; 668us; 683us; 698us; 713us; 718us; 720us; 722us; 724us; 735us; 746us; 757us; 768us; 779us; 790us; 803us; 817us; 832us; 848us; 863us; 879us; 895us; 909us; 910us; 911us; 915us; 917us; 921us; 923us; 937us; 951us; 965us; 979us; 993us; 1007us; 1021us; 1035us; 1049us; 1063us; 1077us; 1091us; 1105us; 1119us; 1133us; 1147us; 1161us; 1175us; 1189us; 1190us; 1204us; 1205us; 1209us; 1211us; 1212us; 1216us; 1219us; 1220us; 1229us; 1231us; 1232us; 1246us; 1247us; 1248us; 1262us; 1263us; 1264us; 1265us; 1267us; 1268us; 1269us; 1270us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 0us; 2us; 2us; 1us; 2us; 1us; 2us; 3us; 3us; 4us; 6us; 6us; 0us; 1us; 1us; 3us; 3us; 0us; 2us; 3us; 1us; 1us; 2us; 2us; 3us; 1us; 7us; 5us; 5us; 6us; 7us; 5us; 5us; 5us; 6us; 2us; 4us; 1us; 1us; 1us; 3us; 4us; 2us; 2us; 1us; 3us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 5us; 1us; 3us; 2us; 1us; 3us; 2us; 2us; 4us; 0us; 1us; 1us; 3us; 1us; 1us; 2us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 10us; 10us; 10us; 11us; 11us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 13us; 13us; 13us; 13us; 13us; 14us; 15us; 16us; 16us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 18us; 18us; 18us; 19us; 19us; 19us; 19us; 19us; 20us; 20us; 21us; 21us; 22us; 22us; 22us; 22us; 23us; 23us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 65535us; 16388us; 16389us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 16394us; 65535us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 16397us; 16399us; 65535us; 65535us; 16401us; 65535us; 65535us; 16402us; 65535us; 16404us; 65535us; 65535us; 16405us; 16406us; 65535us; 16407us; 65535us; 16408us; 65535us; 16409us; 65535us; 16410us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 65535us; 65535us; 16415us; 16416us; 16417us; 16419us; 65535us; 65535us; 65535us; 65535us; 16420us; 65535us; 16421us; 65535us; 65535us; 65535us; 16422us; 65535us; 65535us; 16424us; 65535us; 16425us; 65535us; 65535us; 65535us; 65535us; 65535us; 16427us; 65535us; 65535us; 65535us; 65535us; 16430us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16432us; 16433us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16454us; 65535us; 16455us; 65535us; 65535us; 16457us; 65535us; 65535us; 16458us; 65535us; 65535us; 16460us; 65535us; 16461us; 16463us; 65535us; 16465us; 16466us; 16467us; 65535us; 16468us; 16469us; 16470us; 16471us; |]
let _fsyacc_reductions ()  =    [| 
# 487 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 496 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "CPar.fsy"
                                                               Prog _1 
                   )
# 45 "CPar.fsy"
                 : Absyn.program));
# 507 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "CPar.fsy"
                                                               [] 
                   )
# 49 "CPar.fsy"
                 : 'Topdecs));
# 517 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "CPar.fsy"
                                                               _1 :: _2 
                   )
# 50 "CPar.fsy"
                 : 'Topdecs));
# 529 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "CPar.fsy"
                                                               Vardec (fst _1, snd _1) 
                   )
# 54 "CPar.fsy"
                 : 'Topdec));
# 540 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Fundec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "CPar.fsy"
                                                               _1 
                   )
# 55 "CPar.fsy"
                 : 'Topdec));
# 551 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "CPar.fsy"
                                                               ((fst _2) _1, snd _2) 
                   )
# 59 "CPar.fsy"
                 : 'Vardec));
# 563 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "CPar.fsy"
                                                               ((fun t -> t), _1)                      
                   )
# 63 "CPar.fsy"
                 : 'Vardesc));
# 574 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "CPar.fsy"
                                                               compose1 TypP _2                        
                   )
# 64 "CPar.fsy"
                 : 'Vardesc));
# 585 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "CPar.fsy"
                                                               _2                                      
                   )
# 65 "CPar.fsy"
                 : 'Vardesc));
# 596 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, None)) _1    
                   )
# 66 "CPar.fsy"
                 : 'Vardesc));
# 607 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, Some _3)) _1 
                   )
# 67 "CPar.fsy"
                 : 'Vardesc));
# 619 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "CPar.fsy"
                                                               Fundec(None,     _2, _4, _6) 
                   )
# 71 "CPar.fsy"
                 : 'Fundec));
# 632 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "CPar.fsy"
                                                               Fundec(Some(_1), _2, _4, _6) 
                   )
# 72 "CPar.fsy"
                 : 'Fundec));
# 646 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "CPar.fsy"
                                                               [] 
                   )
# 76 "CPar.fsy"
                 : 'Paramdecs));
# 656 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "CPar.fsy"
                                                               _1 
                   )
# 77 "CPar.fsy"
                 : 'Paramdecs));
# 667 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "CPar.fsy"
                                                               [_1]     
                   )
# 81 "CPar.fsy"
                 : 'Paramdecs1));
# 678 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 82 "CPar.fsy"
                 : 'Paramdecs1));
# 690 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "CPar.fsy"
                                                               Block _2 
                   )
# 86 "CPar.fsy"
                 : 'Block));
# 701 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "CPar.fsy"
                                                               [] 
                   )
# 90 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 711 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "CPar.fsy"
                                                               Stmt _1 :: _2 
                   )
# 91 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 723 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "CPar.fsy"
                                                               Dec (fst _1, snd _1) :: _3 
                   )
# 92 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 735 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "CPar.fsy"
                                                               _1 
                   )
# 96 "CPar.fsy"
                 : 'Stmt));
# 746 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "CPar.fsy"
                                                               _1 
                   )
# 97 "CPar.fsy"
                 : 'Stmt));
# 757 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "CPar.fsy"
                                                               Expr(_1)             
                   )
# 101 "CPar.fsy"
                 : 'StmtM));
# 768 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "CPar.fsy"
                                                               Return None          
                   )
# 102 "CPar.fsy"
                 : 'StmtM));
# 778 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "CPar.fsy"
                                                               Return(Some(_2))     
                   )
# 103 "CPar.fsy"
                 : 'StmtM));
# 789 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "CPar.fsy"
                                                               _1                   
                   )
# 104 "CPar.fsy"
                 : 'StmtM));
# 800 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 105 "CPar.fsy"
                 : 'StmtM));
# 813 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Casedecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "CPar.fsy"
                                                               Switch(_3, _5)       
                   )
# 106 "CPar.fsy"
                 : 'StmtM));
# 825 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "CPar.fsy"
                                                               While(_3, _5)        
                   )
# 107 "CPar.fsy"
                 : 'StmtM));
# 837 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "CPar.fsy"
                                                               Do(_2, _5)           
                   )
# 108 "CPar.fsy"
                 : 'StmtM));
# 849 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 112 "CPar.fsy"
                 : 'StmtU));
# 862 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "CPar.fsy"
                                                               If(_3, _5, Block []) 
                   )
# 113 "CPar.fsy"
                 : 'StmtU));
# 874 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Casedecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "CPar.fsy"
                                                               Switch(_3, _5)       
                   )
# 114 "CPar.fsy"
                 : 'StmtU));
# 886 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "CPar.fsy"
                                                               While(_3, _5)        
                   )
# 115 "CPar.fsy"
                 : 'StmtU));
# 898 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "CPar.fsy"
                                                               Do(_2, _5)           
                   )
# 116 "CPar.fsy"
                 : 'StmtU));
# 910 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Casedec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Casedecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "CPar.fsy"
                                                               _1 :: _2            
                   )
# 120 "CPar.fsy"
                 : 'Casedecs));
# 922 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "CPar.fsy"
                                                               Case(_2, _4)        
                   )
# 124 "CPar.fsy"
                 : 'Casedec));
# 934 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "CPar.fsy"
                                                               Access _1           
                   )
# 127 "CPar.fsy"
                 : 'Expr));
# 945 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "CPar.fsy"
                                                               _1                  
                   )
# 128 "CPar.fsy"
                 : 'Expr));
# 956 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "CPar.fsy"
                                                               _1                  
                   )
# 132 "CPar.fsy"
                 : 'ExprNotAccess));
# 967 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "CPar.fsy"
                                                               Assign(_1, _3)      
                   )
# 133 "CPar.fsy"
                 : 'ExprNotAccess));
# 979 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "CPar.fsy"
                                                               Call(_1, _3)        
                   )
# 134 "CPar.fsy"
                 : 'ExprNotAccess));
# 991 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "CPar.fsy"
                                                               Prim1("!", _2)      
                   )
# 135 "CPar.fsy"
                 : 'ExprNotAccess));
# 1002 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "CPar.fsy"
                                                               Prim1("printi", _2) 
                   )
# 136 "CPar.fsy"
                 : 'ExprNotAccess));
# 1013 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "CPar.fsy"
                                                               Prim1("printc", nl) 
                   )
# 137 "CPar.fsy"
                 : 'ExprNotAccess));
# 1023 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "CPar.fsy"
                                                               Prim2("+",  _1, _3) 
                   )
# 138 "CPar.fsy"
                 : 'ExprNotAccess));
# 1035 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "CPar.fsy"
                                                               P2(_1, '+')         
                   )
# 139 "CPar.fsy"
                 : 'ExprNotAccess));
# 1046 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "CPar.fsy"
                                                               P2(_1, '-')         
                   )
# 140 "CPar.fsy"
                 : 'ExprNotAccess));
# 1057 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "CPar.fsy"
                                                               P1('+', _2)         
                   )
# 141 "CPar.fsy"
                 : 'ExprNotAccess));
# 1068 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "CPar.fsy"
                                                               P1('-', _2)         
                   )
# 142 "CPar.fsy"
                 : 'ExprNotAccess));
# 1079 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "CPar.fsy"
                                                               Assign(_1, Prim2("+", _1, _3)) 
                   )
# 143 "CPar.fsy"
                 : 'ExprNotAccess));
# 1091 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "CPar.fsy"
                                                               Assign(_1, Prim2("-", _1, _3)) 
                   )
# 144 "CPar.fsy"
                 : 'ExprNotAccess));
# 1103 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "CPar.fsy"
                                                               Assign(_1, Prim2("*", _1, _3)) 
                   )
# 145 "CPar.fsy"
                 : 'ExprNotAccess));
# 1115 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "CPar.fsy"
                                                               Assign(_1, Prim2("/", _1, _3)) 
                   )
# 146 "CPar.fsy"
                 : 'ExprNotAccess));
# 1127 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "CPar.fsy"
                                                               Assign(_1, Prim2("%", _1, _3)) 
                   )
# 147 "CPar.fsy"
                 : 'ExprNotAccess));
# 1139 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "CPar.fsy"
                                                               Prim2("-",  _1, _3) 
                   )
# 148 "CPar.fsy"
                 : 'ExprNotAccess));
# 1151 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "CPar.fsy"
                                                               Prim2("*",  _1, _3) 
                   )
# 149 "CPar.fsy"
                 : 'ExprNotAccess));
# 1163 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "CPar.fsy"
                                                               Prim2("/",  _1, _3) 
                   )
# 150 "CPar.fsy"
                 : 'ExprNotAccess));
# 1175 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "CPar.fsy"
                                                               Prim2("%",  _1, _3) 
                   )
# 151 "CPar.fsy"
                 : 'ExprNotAccess));
# 1187 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "CPar.fsy"
                                                               Prim2("==", _1, _3) 
                   )
# 152 "CPar.fsy"
                 : 'ExprNotAccess));
# 1199 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "CPar.fsy"
                                                               Prim2("!=", _1, _3) 
                   )
# 153 "CPar.fsy"
                 : 'ExprNotAccess));
# 1211 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "CPar.fsy"
                                                               Prim2(">",  _1, _3) 
                   )
# 154 "CPar.fsy"
                 : 'ExprNotAccess));
# 1223 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "CPar.fsy"
                                                               Prim2("<",  _1, _3) 
                   )
# 155 "CPar.fsy"
                 : 'ExprNotAccess));
# 1235 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "CPar.fsy"
                                                               Prim2(">=", _1, _3) 
                   )
# 156 "CPar.fsy"
                 : 'ExprNotAccess));
# 1247 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "CPar.fsy"
                                                               Prim2("<=", _1, _3) 
                   )
# 157 "CPar.fsy"
                 : 'ExprNotAccess));
# 1259 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "CPar.fsy"
                                                               Andalso(_1, _3)     
                   )
# 158 "CPar.fsy"
                 : 'ExprNotAccess));
# 1271 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "CPar.fsy"
                                                               Orelse(_1, _3)      
                   )
# 159 "CPar.fsy"
                 : 'ExprNotAccess));
# 1283 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "CPar.fsy"
                                                               Question(_1, _2, _3)
                   )
# 160 "CPar.fsy"
                 : 'ExprNotAccess));
# 1296 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Const)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "CPar.fsy"
                                                               CstI _1             
                   )
# 164 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1307 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "CPar.fsy"
                                                               _2                  
                   )
# 165 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1318 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "CPar.fsy"
                                                               Addr _2             
                   )
# 166 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1329 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "CPar.fsy"
                                                               AccVar _1           
                   )
# 170 "CPar.fsy"
                 : 'Access));
# 1340 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "CPar.fsy"
                                                               _2                  
                   )
# 171 "CPar.fsy"
                 : 'Access));
# 1351 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "CPar.fsy"
                                                               AccDeref (Access _2)
                   )
# 172 "CPar.fsy"
                 : 'Access));
# 1362 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "CPar.fsy"
                                                               AccDeref _2         
                   )
# 173 "CPar.fsy"
                 : 'Access));
# 1373 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "CPar.fsy"
                                                               AccIndex(_1, _3)    
                   )
# 174 "CPar.fsy"
                 : 'Access));
# 1385 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "CPar.fsy"
                                                               []       
                   )
# 178 "CPar.fsy"
                 : 'Exprs));
# 1395 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "CPar.fsy"
                                                               _1       
                   )
# 179 "CPar.fsy"
                 : 'Exprs));
# 1406 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "CPar.fsy"
                                                               [_1]     
                   )
# 183 "CPar.fsy"
                 : 'Exprs1));
# 1417 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 184 "CPar.fsy"
                 : 'Exprs1));
# 1429 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "CPar.fsy"
                                                               _1       
                   )
# 188 "CPar.fsy"
                 : 'Const));
# 1440 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "CPar.fsy"
                                                               _1       
                   )
# 189 "CPar.fsy"
                 : 'Const));
# 1451 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "CPar.fsy"
                                                               - _2     
                   )
# 190 "CPar.fsy"
                 : 'Const));
# 1462 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "CPar.fsy"
                                                               -1       
                   )
# 191 "CPar.fsy"
                 : 'Const));
# 1472 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 195 "CPar.fsy"
                                                               TypI     
                   )
# 195 "CPar.fsy"
                 : 'Type));
# 1482 "CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "CPar.fsy"
                                                               TypC     
                   )
# 196 "CPar.fsy"
                 : 'Type));
|]
# 1493 "CPar.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 54;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
